<?php

/**
 * @file
 * Install, update and uninstall functions for the fundraiser_tickets module.
 */

/**
 * Implements hook_schema().
 */
function fundraiser_tickets_schema() {
  $schema['fundraiser_tickets_add_on_donations'] = array(
    'description' => 'Tracking table for add-on donations created by ticket purchases.',
    'fields' => array(
      'id' => array(
        'description' => 'Id of the add-on donation.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'original_nid' => array(
        'description' => 'Node id from where the original donation was made.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'add_on_nid' => array(
        'description' => 'Node id that was used to process the add-on donation.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'original_did' => array(
        'description' => 'Id of the original donation.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'add_on_did' => array(
        'description' => 'Id of the add-on donation.',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'original_nid' => array('original_nid'),
    ),
  );

  return $schema;
}

/**
 * Add the new table {fundraiser_tickets_add_on_donations}
 */
function fundraiser_tickets_update_7001() {
  $schema = fundraiser_tickets_schema();
  db_create_table('fundraiser_tickets_add_on_donations', $schema['fundraiser_tickets_add_on_donations']);

  return 'Added table fundraiser_tickets_add_on_donations.';
}

/**
 * Assign the delete ticket permission to the Springboard admin role.
 */
function fundraiser_tickets_update_7002() {
  $sb_admin_role = user_role_load_by_name('Springboard administrator');
  if ($sb_admin_role) {
    user_role_grant_permissions($sb_admin_role->rid, array('allow node-specific ticket deletion'));
  }
}

/**
 * Add the new "Quantity displayed" field to the "Fundraiser Tickets" product type if needed.
 */
function fundraiser_tickets_update_7003() {
  module_load_include('inc', 'fundraiser_tickets', 'includes/fundraiser_tickets.product');
  if (function_exists('_fundraiser_tickets_create_fundraiser_ticket_product')) {
    _fundraiser_tickets_create_fundraiser_ticket_product();
  }
}

/**
 * Convert the ticket description field to a textarea.
 */
function fundraiser_tickets_update_7005() {

  $fields = array(
    'fr_tickets_description',
  );

  foreach ($fields as $field_name) {

    $data_table = 'field_data_' . $field_name;
    $revision_table = 'field_revision_' . $field_name;
    $value_field = $field_name . '_value';

    if (db_table_exists($data_table)) {
      // Change the field_config table entry.
      $result = db_query('select data, id from {field_config} where field_name = :name', array(':name' => $field_name));
      foreach ($result as $field) {
        $settings = unserialize($field->data);
        $settings['foreign keys']['format'] = array(
          'columns' => array(
            'format' => 'format',
          ),
          'table' => 'filter_format',
        );
        $settings['settings'] = array();

        db_update('field_config')
          ->fields(array('data' => serialize($settings), 'type' => 'text_long'))
          ->condition('id', $field->id)
          ->execute();
      }

      // Change the field storage tables.
      $textarea_spec = array(
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      );
      db_change_field($data_table, $value_field, $value_field, $textarea_spec);
      db_change_field($revision_table, $value_field, $value_field, $textarea_spec);

      // Change the field_config_instance settings so that the
      // textarea shows up in the admin ui.
      $result = db_query("Select entity_type, bundle FROM {field_config_instance} WHERE field_name = :name", array(':name' => $field_name));
      foreach ($result as $instance) {
        $instance_info = field_info_instance($instance->entity_type, $field_name, $instance->bundle);
        $instance_info['widget']['type'] = 'text_textarea';
        $instance_info['widget']['settings']['rows'] = 5;
        if (isset($instance_info['widget']['settings']['size'])) {
          unset($instance_info['widget']['settings']['size']);
        }
        $instance_info['settings']['text_processing'] = 1;
        field_update_instance($instance_info);
      }
    }
  }
  // Clear caches.
  field_cache_clear();
}