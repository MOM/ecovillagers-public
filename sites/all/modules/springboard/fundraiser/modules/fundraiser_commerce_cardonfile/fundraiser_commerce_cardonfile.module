<?php
/**
 * @file
 * Module file for fundraiser_commerce_cardonfile.
 */

require_once 'includes/fundraiser_commerce_cardonfile.fundraiser.inc';

/**
 * Implements hook_menu().
 */
function fundraiser_commerce_cardonfile_menu() {
  $items = array();

  $items['admin/springboard/options/fundraiser/fundraiser_commerce_cardonfile'] = array(
    'title' => 'Fundraiser Cardonfile Settings',
    'description' => 'Settings for fundraiser cardonfile.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_commerce_cardonfile_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer fundraiser configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/fundraiser_commerce_cardonfile.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function fundraiser_commerce_cardonfile_menu_alter(&$items) {
  if (module_exists('commerce_cardonfile')) {
    $items['user/%user/cards/%commerce_cardonfile/edit'] = array(
        'page callback' => 'fundraiser_commerce_cardonfile_form_commerce_cardonfile_card_form',
        'page arguments' => array(3, 1),
      ) + $items['user/%user/cards/%commerce_cardonfile/edit'];
  }
  return $items;
}

/**
 * Implements hook_views_api().
 */
function fundraiser_commerce_cardonfile_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'fundraiser_commerce_cardonfile') . '/includes/views',
  );
}

/**
 * Implements hook_views_pre_render().
 *
 * Remove cards that have no used for entries; remove card name and billing
 * profile label if the card name is the same as the billing profile name.
 */
function fundraiser_commerce_cardonfile_views_pre_render(&$view) {
  if ($view->name != 'commerce_card_on_file_user_cards') {
    return;
  }

  foreach ($view->result as $key => $result) {
    // If this card isn't being used for one-click donate or for a recurring
    // donation unset it.
    if (empty($result->used_for)) {
      unset($view->result[$key]);
      continue;
    }

    // Array of payment gateways used for cards that should not be displayed.
    $blacklist = array(
      'commerce_psi_credit|commerce_payment_commerce_psi_credit',
    );

    // If the payment gateway is in the blacklist, unset this card.
    $card = commerce_cardonfile_load($result->card_id);
    if (in_array($card->instance_id, $blacklist)) {
      return;
    }

    // If this card isn't of type "credit", unset it.
    $gateway = _fundraiser_gateway_info($card->instance_id);
    if ($gateway['payment_method'][0] != 'credit') {
      unset($view->result[$key]);
      continue;
    }

    // Unset the card name and billing profile label if the card name and name
    // on the billing profile is the same.
    if (!empty($result->field_commerce_cardonfile_profile) && !empty($result->commerce_cardonfile_card_name) && strpos($result->field_commerce_cardonfile_profile[0]['rendered']['#markup'], $result->commerce_cardonfile_card_name) !== FALSE) {
      unset($view->field['card_name']);
      $view->field['commerce_cardonfile_profile']->options['label'] = '';
    }
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Delete donations attached to a card when the card is deleted.
 */
function fundraiser_commerce_cardonfile_entity_delete($entity, $type) {
  // If this isn't a cardonfile, return early.
  if ($type != 'commerce_cardonfile') {
    return;
  }

  // Get any pending donations associated with the card_id.
  $donations = db_query('SELECT did FROM {fundraiser_donation} WHERE card_id = :card_id AND status = :pending_status', array(
    ':card_id' => $entity->card_id,
    ':pending_status' => 'pending_future_payment',
  ))->fetchAllAssoc('did', PDO::FETCH_ASSOC);
  $donations = array_keys($donations);

  if (empty($donations)) {
    return;
  }

  // Allow other modules to alter the array of donations that will be deleted.
  drupal_alter('fundraiser_commerce_cardonfile_deleted_card_donations', $donations);

  foreach ($donations as $key => $donation_id) {
    $donation = fundraiser_donation_get_donation($donation_id);
    fundraiser_donation_cancel($donation);
    unset($donation);
  }
}

/**
 * Implements hook_entity_view().
 *
 * Shows a confirmation page before a card is deleted.
 */
function fundraiser_commerce_cardonfile_entity_view($entity, $type, $view_mode, $langcode) {
  $arg = arg();
  if ($type == 'commerce_cardonfile' && $view_mode == 'customer' && !empty($arg[4]) && $arg[4] == 'delete') {
    $hidden = array('card_name', 'card_exp');
    foreach ($hidden as $field) {
      $entity->content[$field]['#access'] = FALSE;
    }

    if (!function_exists('entity_property_default_render_value_by_type')) {
      module_load_include('inc', 'entity', 'theme/entity.theme');
    }

    $show = array('card_type', 'card_number');
    foreach ($show as $index => $field) {
      $entity->content[$field] = array_merge($entity->content[$field], array(
        '#theme' => 'html_tag',
        '#tag' => 'span',
        '#value' => entity_property_default_render_value_by_type($entity->content[$field]['#entity_wrapped']->{$entity->content[$field]['#property_name']}),
      ));
    }
  }
}

/**
 * Implements hook_FORM_ID_alter().
 *
 * Add a confirmation dialog to the cancel card form to ensure the user really
 * wants to delete their card.
 */
function fundraiser_commerce_cardonfile_form_commerce_cardonfile_delete_form_alter($form, $form_state) {
  $script = <<<EOT
jQuery(document).ready(function() {
  jQuery('#commerce-cardonfile-delete-form').on('submit', function() {
    var conf = confirm('Are you sure you want to delete this card? Any future and recurring donations associated with it will be canceled.');
    return conf;
  });
});
EOT;
  drupal_add_js($script, 'inline');
}

/**
 * Menu callback to override cardonfile edit form.
 *
 * @param object $card
 *   Cardonfile object.
 * @param object $user
 *   Owner of the card and donations to be updated.
 */
function fundraiser_commerce_cardonfile_form_commerce_cardonfile_card_form($card, $user) {
  // Let other modules adjust the card we use.
  drupal_alter('fundraiser_commerce_cardonfile_update_billing_card', $card);

  // Get the base donation for this card update.
  $donation = fundraiser_commerce_cardonfile_donation_for_card_update($card);

  // If still no donation exists we can't update this card.
  if (empty($donation)) {
    return t('This card cannot be updated.');
  }

  drupal_set_title('Edit Payment Method');

  $data = array(
    'calling module' => 'fundraiser_commerce_cardonfile',
    'donation' => $donation,
    'card' => $card,
    'update other orders' => TRUE,
  );

  $form = drupal_get_form('fundraiser_update_billing_form', $data);

  return drupal_render($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function fundraiser_commerce_cardonfile_form_fundraiser_update_billing_form_alter(&$form, &$form_state) {
  // We only want to alter the update form when its appearing for cardonfile.
  if ($form['#calling_module'] != 'fundraiser_commerce_cardonfile') {
    return;
  }

  $card = $form_state['card'];
  // Add the card details to the top of the form.
  $title = array(
    '#type' => 'html_tag',
    '#tag' => 'h4',
    '#value' => t('You are editing billing information for:'),
  );

  $card_title = array(
    '#type' => 'html_tag',
    '#tag' => 'span',
    '#value' => format_string('@type - XXXX-XXXX-XXXX-@number', array(
      '@type' => strtoupper($card->card_type),
      '@number' => $card->card_number,
    )),
  );

  $expires = array(
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#value' => t('Expires: @month/@year', array(
      '@month' => sprintf('%02d', $card->card_exp_month),
      '@year' => $card->card_exp_year,
    )),
  );

  $form = array(
      'message' => array(
        '#type' => 'markup',
        '#weight' => -100,
        'title' => $title,
        'card_title' => $card_title,
        'expires' => $expires,
      ),
    ) + $form;

  // Use the cards address information instead of the donation.
  $cardonfile_wrapper = entity_metadata_wrapper('commerce_cardonfile', $card);
  if (
    !empty($cardonfile_wrapper->commerce_cardonfile_profile)
     && !empty($cardonfile_wrapper->commerce_cardonfile_profile->commerce_customer_address)
  ) {
    $map = array(
      'first_name' => 'first_name',
      'last_name' => 'last_name',
      'address' => 'thoroughfare',
      'address_line_2' => 'premise',
      'city' => 'locality',
      'country' => 'country',
      'state' => 'administrative_area',
      'zip' => 'postal_code',
    );

    $address_wrapper = $cardonfile_wrapper->commerce_cardonfile_profile->commerce_customer_address;
    foreach ($map as $field_name => $profile_name) {
      if (isset($form['billing_information'][$field_name])) {
        $form['billing_information'][$field_name]['#default_value'] = $address_wrapper->{$profile_name}->value();
      }
    }
  }

  $form['actions']['cancel'] = array(
    '#markup' => '<span class="cancel"> or ' . l(t('Cancel'), 'user/' . $card->uid . '/cards') . '</span>',
    '#weight' => 20,
  );

  // The billing update form defaults to using the fundraiser_sustainers module
  // submission handlers. If this isn't an active recurring donation remove that
  // handler and add our own.
  if (
    !empty($form['#donation']->recurring->master_did)
    && $form['#donation']->status == 'pending_future_payment'
  ) {
    $form['master_did'] = [
      '#type' => 'hidden',
      '#value' => $form['#donation']->recurring->master_did,
    ];
  }
  else {
    if (($key = array_search('fundraiser_sustainers_update_billing_form_submit', $form['actions']['submit']['#submit'])) !== FALSE) {
      unset($form['actions']['submit']['#submit'][$key]);
    }
    $form['actions']['submit']['#submit'][] = 'fundraiser_commerce_cardonfile_update_billing_form_submit';
    // Add the address update handler to the billing update button as well.
    $form['actions']['submit']['#submit'][] = 'fundraiser_commerce_cardonfile_update_billing_address_form_submit';

    // Reset the update address button handler as well.
    if (($key = array_search('fundraiser_sustainers_update_billing_address_only_form_submit', $form['billing_information']['address_update']['#submit'])) !== FALSE) {
      unset($form['billing_information']['address_update']['#submit'][$key]);
    }
    $form['billing_information']['address_update']['#submit'][] = 'fundraiser_commerce_cardonfile_update_billing_address_form_submit';
  }

  // Add a submit handler that will update all series connected to this card.
  $form['actions']['submit']['#submit'][] = 'fundraiser_commerce_cardonfile_update_connected_series_form_submit';

  // Add this submit handler to set the redirect.
  $form['actions']['submit']['#submit'][] = 'fundraiser_commerce_cardonfile_billing_update_form_submit_add_redirect';
  $form['billing_information']['address_update']['#submit'][] = 'fundraiser_commerce_cardonfile_billing_update_form_submit_add_redirect';
}

/**
 * Form submit handler for billing address update form.
 *
 * We only need to update the card's profile as this card is not connected to an
 * active recurring series.
 */
function fundraiser_commerce_cardonfile_update_billing_address_form_submit($form, &$form_state) {
  // If the billing update handler has run use the new card.
  if (isset($form_state['values']['cardonfile']['card'])) {
    $card = $form_state['values']['cardonfile']['card'];
  }
  // Address update only, use the existing card.
  else {
    $card = $form_state['card'];
  }

  // If no card nothing to do.
  if (empty($card)) {
    return;
  }

  // Load the profile or create a new one.
  $cardonfile_wrapper = entity_metadata_wrapper('commerce_cardonfile', $card);
  if (!empty($cardonfile_wrapper->commerce_cardonfile_profile->value())) {
    $profile = $cardonfile_wrapper->commerce_cardonfile_profile->value();
  }
  else {
    $profile = commerce_customer_profile_new('billing', $card->uid);
  }

  $map = array(
    'first_name' => 'first_name',
    'last_name' => 'last_name',
    'address' => 'thoroughfare',
    'address_line_2' => 'premise',
    'city' => 'locality',
    'country' => 'country',
    'state' => 'administrative_area',
    'zip' => 'postal_code',
  );

  // Populate the profile's data array with the address information.
  $field = field_info_field('commerce_customer_address');
  $instance = field_info_instance('commerce_customer_profile', 'commerce_customer_address', 'billing');
  $profile->data = addressfield_default_values($field, $instance);

  $values = $form_state['values'];
  foreach ($map as $field_name => $profile_name) {
    $value = isset($values[$field_name]) ? $values[$field_name] : '';
    $profile->data[$profile_name] = $value;
  }
  $profile->data['name_line'] = $profile->data['first_name'] . ' ' . $profile->data['last_name'];

  // Set the address field to the value of the data array.
  $profile->commerce_customer_address[LANGUAGE_NONE][0] = $profile->data;
  commerce_customer_profile_save($profile);

  if (!empty($profile->profile_id)) {
    // Save the updated profile to the cardonfile record.
    $cardonfile_wrapper->commerce_cardonfile_profile->set($profile->profile_id);
    $cardonfile_wrapper->save();

    drupal_set_message(t('Billing information successfully updated.'));
  }
}

/**
 * Form submit handler for billing address update form.
 *
 * This is only used when there is no active sustainer series connected to a
 * card. Otherwise the sustainer update process is used. In this process the
 * one-time donation is not updated, but the card is.
 */
function fundraiser_commerce_cardonfile_update_billing_form_submit($form, &$form_state) {
  $donation = $form['#donation'];
  $submission_fields = $form_state['values'];
  $donation->donation = array_merge($donation->donation, $submission_fields);

  // Add the old_card value for ocd.
  $form_state['values']['cardonfile']['old_card'] = clone $form_state['card'];

  // Update the gateway's stored data.
  if (isset($donation->gateway['update callback']) && function_exists($donation->gateway['update callback'])) {
    $update_callback = $donation->gateway['update callback'];
  }
  else {
    drupal_set_message(t('Unable to update card data.'));
    return;
  }

  // Allow the gateways to clean the data before going to the update function.
  if (isset($donation->gateway['cleanup callback']) && function_exists($donation->gateway['cleanup callback'])) {
    $cleaned = $donation->gateway['cleanup callback']($donation->donation, $donation->donation['payment_method']);
    $donation->donation['payment_fields'] = $cleaned['payment_fields'];
  }

  // Update the card data through the callback.
  $card_data = $update_callback($donation, $form_state['card']);
  drupal_alter('fundraiser_commerce_donation_update_card_update', $donation, $card_data);

  if (empty($card_data)) {
    drupal_set_message(t('Unable to update payment information. Please check your information and try again.'), 'warning');
    return;
  }

  // Add the new card data for the address update handler and ocd.
  $form_state['values']['cardonfile']['card'] = $card_data;
}

/**
 * Submit handler that updates sustainer series connected to a card.
 *
 * This is similar to fundraiser_sustainers_update_billing_form_submit(), but
 * runs the processes for all series connected to a card.
 */
function fundraiser_commerce_cardonfile_update_connected_series_form_submit($form, &$form_state) {
  $donation = $form['#donation'];
  $submission_fields = $form_state['values'];
  $update_billing = $form_state['update_billing'];
  $update_payment = $form_state['update_payment'];

  // If the billing update handler has run we'll have the new and old cards.
  if (isset($form_state['values']['cardonfile']['card'])) {
    $new_card = $form_state['values']['cardonfile']['card'];
  }
  if (isset($form_state['values']['cardonfile']['old_card'])) {
    $old_card = $form_state['values']['cardonfile']['old_card'];
  }

  // If any of the card info is missing nothing to do.
  if (empty($new_card) || empty($old_card)) {
    return;
  }

  // Update other recurring series that use the old card id.
  $results = db_query('SELECT DISTINCT(fs.master_did) FROM {fundraiser_sustainers} fs LEFT JOIN {fundraiser_donation} fd ON fd.did = fs.did WHERE fd.card_id = :card_id AND fs.master_did <> :master_did', array(
    ':card_id' => $old_card->card_id,
    ':master_did' => $donation->recurring->master_did,
  ))->fetchAll();

  foreach ($results as $result) {
    $remaining = _fundraiser_sustainers_get_donations_recurr_remaining($result->master_did);

    if (!empty($remaining)) {
      global $user;

      fundraiser_sustainers_update_billing_info_in_series($remaining, $submission_fields, $user->name, $update_billing, $update_payment);

      // Load the master donation.
      $master_donation = fundraiser_donation_get_donation($result->master_did);

      // Use the first future donation for a template of new future donations.
      $source_donation = fundraiser_donation_get_donation($remaining[0]->did);
      $source_donation->donation['payment_fields'] = array_merge($source_donation->donation['payment_fields'], $donation->donation['payment_fields']);
      $source_donation->data['payment_fields'] = array_merge($source_donation->data['payment_fields'], $donation->data['payment_fields']);
      $source_donation->donation['cardonfile'] = $donation->donation['cardonfile'];
      $source_donation->data['cardonfile'] = $donation->data['cardonfile'];

      // Create the new donations.
      fundraiser_sustainers_update_billing_info_create_new_donations($master_donation, $source_donation, $submission_fields);
    }
  }
}

/**
 * Submission handler for billing update form.
 */
function fundraiser_commerce_cardonfile_billing_update_form_submit_add_redirect($form, &$form_state) {
  $form_state['redirect'] = 'user/' . $form_state['card']->uid . '/cards';
}

/**
 * Returns the best donation for a card update.
 *
 * @param object $card
 *   Cardonfile object.
 *
 * @return mixed
 *   Fully loaded donation object, or NULL if nothing was found.
 */
function fundraiser_commerce_cardonfile_donation_for_card_update($card) {
  $donation = NULL;

  // Query for the most recent sustainer attached to to this card.
  $query = db_select('fundraiser_sustainers', 'fs');
  $query->fields('fs', array('master_did'));
  $query->join('fundraiser_donation', 'f', 'f.did = fs.did');
  $query->condition('f.card_id', $card->card_id);
  $query->condition('f.status', 'pending_future_payment');
  $query->orderBy('f.created');
  $query->range(0, 1);
  $result = $query->execute()->fetchField();

  // For a recurring donation be sure to grab the next to be charged in series.
  if (!empty($result)) {
    $remaining = _fundraiser_sustainers_get_donations_recurr_remaining($result);
    if ($remaining) {
      $donation = fundraiser_donation_get_donation($remaining[0]->did);
    }
  }

  // If no series was found use the most recent one-time donation for this card.
  if (empty($donation)) {
    $donation = fundraiser_donation_get_donations_by_uid($card->uid, 1, 'DESC', $card->instance_id, $card->card_id);
  }

  // If no donation is connected to card, use one matching this gateway.
  if (empty($donation)) {
    $donation = fundraiser_donation_get_donations_by_uid($card->uid, 1, 'DESC', $card->instance_id);
  }

  return $donation;
}
