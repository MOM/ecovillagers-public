<?php

/**
 * @file
 * This module provides functionality for pre-populating forms from
 *   an encrypted query string parameter without bootstrapping drupal
 *   or busting cache.
 */

/**
 * Implements hook_implements_alter().
 */
function secure_prepopulate_module_implements_alter(&$implementations, $hook) {
  // We need these hooks to run last.
  $hooks = array(
    'form_alter',
  );

  if (in_array($hook, $hooks) && isset($implementations['secure_prepopulate'])) {
    $group = $implementations['secure_prepopulate'];
    unset($implementations['secure_prepopulate']);
    $implementations['secure_prepopulate'] = $group;
  }
}

/**
 * Implements hook_permission().
 */
function secure_prepopulate_permission() {
  return array(
    'administer secure autofill' => array(
      'title' => t('Administer Secure Autofill'),
      'description' => t('Administer Secure Autofill settings.'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function secure_prepopulate_cron() {
  // Cleanup the secure_prepopulate_expired table.
  $max_days = variable_get('secure_prepopulate_expired_date_limit', 30);
  $max_date = REQUEST_TIME - ($max_days * 24 * 60 * 60);
  db_delete('secure_prepopulate_expired')
    ->condition('expire_date', $max_date, '<')
    ->execute();
}

/**
 * Implements hook_menu().
 */
function secure_prepopulate_menu() {
  $items = array();
  $items['admin/config/system/secure-autofill'] = array(
    'title' => 'Secure Autofill',
    'description' => 'Secure Autofill settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_prepopulate_admin_settings'),
    'access arguments' => array('administer secure autofill'),
    'file' => 'secure_prepopulate.admin.inc',
  );
  $items['admin/config/system/secure-autofill/settings'] = array(
    'title' => 'Secure Autofill',
    'description' => 'Secure Autofill settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_prepopulate_admin_settings'),
    'access arguments' => array('administer secure autofill'),
    'file' => 'secure_prepopulate.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  $items['admin/config/system/secure-autofill/token_generator'] = array(
    'title' => 'Token Generator',
    'description' => 'Generate query string tokens for testing or use',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_prepopulate_token_generator'),
    'access arguments' => array('administer secure autofill'),
    'file' => 'secure_prepopulate.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/system/secure-autofill/test-generator'] = array(
    'title' => 'Test Generator',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_prepopulate_test_url_generator_form'),
    'access arguments' => array('administer secure autofill'),
    'file' => 'secure_prepopulate.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 9999,
  );
  return $items;
}

/**
 * Implements hook_js_info().
 */
function secure_prepopulate_js_info() {
  $callbacks['get_amounts'] = array(
    'methods' => array('POST'),
    'token' => FALSE,
  );
  $callbacks['get_values'] = array(
    'methods' => array('POST'),
    'token' => FALSE,
  );
  return $callbacks;
}

/**
 * Implements MODULE_js_callback_CALLBACK().
 *
 * Callback for decrypting a dynamic gift string.
 */
function secure_prepopulate_js_callback_get_amounts($gs, $user_hash = NULL) {
  $json = array();

  // Ensure that the gift string variable was provided.
  if (!isset($gs)) {
    $json['content'] = FALSE;
    return $json;
  }
  elseif (is_null($user_hash) || $user_hash == "null") {
    // PHP will interpret null js values as a string.
    // @see https://stackoverflow.com/questions/3042524/posting-null-values-via-ajax
    // Set user hash here.
    $user_hash = secure_prepopulate_user_hash(16);
  }

  if (secure_prepopulate_is_expired($gs, $user_hash)) {
    // Don't decrypt expired strings.
    $json['content'] = FALSE;
    return $json;
  }
  else {
    // Decrypt gs per dynamic gift strings.
    $raw_qs = secure_prepopulate_decrypt(urldecode($gs));
    $parsed_qs = secure_prepopulate_parse_qs($raw_qs);
    // Ensure amounts are valid.
    $valid = secure_prepopulate_validate_gs($parsed_qs);
    if ($valid) {
      $json['content'] = $parsed_qs;
      // Set user hash.
      $json['content']['userhash'] = $user_hash;
    }
    else {
      drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
      watchdog("Secure Autofill", "Gift string is invalid.", NULL, WATCHDOG_ERROR);
      $json['content'] = FALSE;
    }
  }

  return $json;
}

/**
 * Implements MODULE_js_callback_CALLBACK().
 *
 * Callback for decrypting a secure prepopulate string.
 */
function secure_prepopulate_js_callback_get_values($af, $user_hash = NULL) {
  $json = array();

  // Ensure that the gift string variable was provided.
  if (!isset($af)) {
    $json['content'] = FALSE;
    return $json;
  }
  elseif (is_null($user_hash) || $user_hash == "null") {
    // PHP will interpret null js values as a string.
    // @see https://stackoverflow.com/questions/3042524/posting-null-values-via-ajax
    // Set user hash here.
    $user_hash = secure_prepopulate_user_hash(16);
  }

  if (secure_prepopulate_is_expired($af, $user_hash)) {
    // Don't decrypt expired strings.
    $json['content'] = FALSE;
  }
  else {
    // Decrypt af.
    $raw_qs = secure_prepopulate_decrypt(urldecode($af));
    $json['content'] = secure_prepopulate_parse_qs($raw_qs);
    $json['content']['userhash'] = $user_hash;
    // Expire string if necessary.
    $never_expire = secure_prepopulate_variable_get('secure_prepopulate_toggle_expiration', 1);
    if (!$never_expire) {
      secure_prepopulate_expire($af, $user_hash);
    }
  }

  return $json;
}

/**
 * Implements hook_form_alter().
 *
 * Add secure_prepopulate js to donation forms, bypass amount validation.
 */
function secure_prepopulate_form_alter(&$form, &$form_state, $form_id) {
  // This code attaches the secure autofill js and form sub handler to ALL
  // donation forms.
  // Drupal isn't aware of the gs and af because it is never bootstrapped.
  if (strstr($form_id, 'webform_client_form') !== FALSE && fundraiser_is_donation_type($form['#node']->type) && arg(4) != 'edit') {
    // Attach ask amount handler and cookie library at beginning of array so
    // our js gets run first.
    $form['#attached']['library'][] = array('system', 'jquery.cookie');
    array_unshift($form['#attached']['js'], drupal_get_path('module', 'secure_prepopulate') . '/js/secure-prepopulate.js');

    // Bypass amount field validation so we can inject our values.
    $amount = _fundraiser_get_form_field($form, 'amount');
    if (isset($amount)) {
      $amount['#webform_validated'] = TRUE;
      $form = _fundraiser_update_form_field($form, 'amount', $amount);
    }
    $recurring_amount = _fundraiser_get_form_field($form, 'recurring_amount');
    if (isset($recurring_amount)) {
      $recurring_amount['#webform_validated'] = TRUE;
      $form = _fundraiser_update_form_field($form, 'recurring_amount', $recurring_amount);
    }

    // Add drupal.setting for secure autofill 'not me' message.
    $form['#attached']['js'][] = array(
      'data' => array('secure_prepopulate' => array('secure_prepopulate_not_me' => variable_get('secure_prepopulate_not_me', ''))),
      'type' => 'setting',
    );

    // Add drupal.setting for GLOBAL GIFT STRING option.
    $form['#attached']['js'][] = array(
      'data' => array('secure_prepopulate' => array('secure_prepopulate_global_gift_strings' => (bool) variable_get('secure_prepopulate_global_gift_strings', 0))),
      'type' => 'setting',
    );

    // Add drupal.setting for GLOBAL GIFT STRING option.
    $expire = round(strtotime(variable_get('secure_prepopulate_dynamic_gift_strings_cookie_lifetime', '1 year')) * 1000);
    $form['#attached']['js'][] = array(
      'data' => array(
        'secure_prepopulate' => array(
          'secure_prepopulate_dynamic_gift_strings_cookie_lifetime' => $expire,
        ),
      ),
      'type' => 'setting',
    );

    if (variable_get('secure_prepopulate_global_gift_strings', 0)) {
      $omit = secure_prepopulate_check_ggs_status($form['#node']);
    }
    else {
      $omit = FALSE;
    }
    $form['#attached']['js'][] = array(
      'data' => array(
        'secure_prepopulate' => array(
          'secure_prepopulate_gs_omit' => $omit,
        ),
      ),
      'type' => 'setting',
    );

    // Add form validate handler to ensure only numeric and 'other' values can be entered into 'amount'.
    $form['#validate'][] = "secure_prepopulate_donation_validate";

    // Add the submit handler.
    $form['#submit'][] = 'secure_prepopulate_submit';
  }
  elseif (strstr($form_id, 'webform_client_form') !== FALSE && arg(4) != 'edit') {
    // This code attaches the secure autofill js and form sub handler to ALL
    // webforms forms. Attach ask amount handler and cookie library at
    // beginning of array so our js gets run first.
    $form['#attached']['library'][] = array('system', 'jquery.cookie');
    array_unshift($form['#attached']['js'], drupal_get_path('module', 'secure_prepopulate') . '/js/secure-prepopulate.js');

    // Add drupal.setting for secure autofill 'not me' message.
    $form['#attached']['js'][] = array(
      'data' => array('secure_prepopulate' => array('secure_prepopulate_not_me' => variable_get('secure_prepopulate_not_me', ''))),
      'type' => 'setting',
    );

    // Add the submit handler.
    $form['#submit'][] = 'secure_prepopulate_submit';
  }
}

/**
 * Implements hook_form_alter().
 *
 * Add secure_prepopulate js to donation forms, bypass amount validation.
 */
function secure_prepopulate_form_node_form_alter(&$form, &$form_state) {
  $tickets = FALSE;
  if (module_exists('fundraiser_tickets')) {
    if (fundraiser_tickets_is_ticket_type($form['#node']->type)) {
      $tickets = TRUE;
    }
  }
  if (!$tickets && fundraiser_is_donation_type($form['#node']->type) && variable_get('secure_prepopulate_global_gift_strings', 0)) {
    if (isset($form['#node']->nid)) {
      $gs_status = secure_prepopulate_check_ggs_status($form['#node']);
    }
    else {
      $gs_status = 0;
    }

    $form['fundraiser_settings']['gs_omit'] = array(
      '#type' => 'checkbox',
      '#title' => t('Do not display persistent gift strings on this form.'),
      '#description' => t("Check this box to prevent ask amounts on this form from being overridden by the donor's persistent gift string. Personalized gift strings in the donor's URL string will display, and will set or update the persistent gift string unless the suppression parameter is used."),
      '#default_value' => $gs_status,
      '#weight' => 4,
    );
  }
}


/**
 * Validate handler, includes special handling for selected amounts.
 */
function secure_prepopulate_donation_validate($form, &$form_state) {
  // Find selected amount and put it into a cookie for secure autofill's js to populate.
  $node = $form['#node'];
  $component_hierarchy = _fundraiser_webform_parse_components($node->nid, $node->webform['components']);
  $amount_field = &_fundraiser_webform_find_field($form_state['complete form'], $component_hierarchy['amount']);
  $recurring_amount_field = &_fundraiser_webform_find_field($form_state['complete form'], $component_hierarchy['recurring_amount']);
  $other_amount_field = &_fundraiser_webform_find_field($form_state['complete form'], $component_hierarchy['other_amount']);
  $recurring_other_amount_field = &_fundraiser_webform_find_field($form_state['complete form'], $component_hierarchy['recurring_other_amount']);
  $recurs_field = &_fundraiser_webform_find_field($form_state['complete form'], $component_hierarchy['recurs_monthly']);

  // Sometimes the recurring setting appears as an array, fix that here.
  if (is_array($recurs_field['#value'])) {
    $recurs_field['#value'] = end($recurs_field['#value']);
  }

  // Check for confusing selection.
  if ((!empty($recurring_amount_field['#value']) && $recurring_amount_field['#value'] != "other" && !empty($recurring_other_amount_field['#value'])) || !empty($amount_field['#value']) && $amount_field['#value'] != "other" && !empty($other_amount_field['#value'])) {
    // Take no action here, sustainers will throw a validation error.
    // Set empty cookie so no action is taken by secure prepop js.
    setcookie('gs-' . $node->nid . '-selected', '', time() - 3600, '/');
  }
  elseif (($node->recurring_setting === 'always' || $node->recurring_setting === 'never') && !empty($amount_field['#value']) && (is_numeric($amount_field['#value']) || $amount_field['#value'] === "other")) {
    // If we have a recurring-only or one-time only form, set value to selected amount.
    $value = $amount_field['#value'];
  }
  // Otherwise we must have a user_choice form that is dual ask and recurring, the only time we use recurring amount.
  elseif ($node->recurring_setting === "user_choice" && $recurs_field['#value'] == "recurs" && $node->recurring_dual_ask_amounts && !empty($recurring_amount_field['#value']) && (is_numeric($recurring_amount_field['#value']) || $recurring_amount_field['#value'] === "other")) {
    $value = $recurring_amount_field['#value'];
  }
  // Otherwise we must have a user_choice form that is not dual ask, which uses amount.
  elseif ($node->recurring_setting === "user_choice" && (empty($node->recurring_dual_ask_amounts)) && !empty($amount_field['#value']) && (is_numeric($amount_field['#value']) || $amount_field['#value'] === "other")) {
    $value = $amount_field['#value'];
  }
  // Otherwise we must have a user_choice form that's one-time, so use amount in all cases.
  elseif ($node->recurring_setting === "user_choice" && $recurs_field['#value'] <> "recurs" && !empty($amount_field['#value']) && (is_numeric($amount_field['#value']) || $amount_field['#value'] === "other")) {
    $value = $amount_field['#value'];
  }
  if (isset($value) && (is_numeric($value) || $value == "other")) {
    // If we have a value, set it here.
    setcookie('gs-' . $node->nid . '-selected', $value);
  }
}

/**
 * Encrypt an input string (128 bit AES) using the configured key and initialization vector.
 *
 * @param $input
 *   The string to encrypt.
 *
 * @return string
 *   The encrypted string.
 */
function secure_prepopulate_encrypt($input) {
  // The 128 bit key to use to decrypt the string.
  $key = secure_prepopulate_variable_get('secure_prepopulate_key', NULL);
  // The initialization vector to use to decrypt the string.
  $iv = secure_prepopulate_variable_get('secure_prepopulate_iv', NULL);
  if (!$key || !$iv) {
    drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
    watchdog('Secure Autofill', 'Cannot perform decryption because AES Key and IV have not been configured correctly.', NULL, WATCHDOG_CRITICAL);
    return FALSE;
  }
  $kv = array('key' => $key, 'iv' => $iv);
  $size = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
  $input = _secure_prepopulate_pkcs5_pad($input, $size);
  $descriptor = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', MCRYPT_MODE_CBC, '');
  mcrypt_generic_init($descriptor, $kv['key'], $kv['iv']);
  $cipher = mcrypt_generic($descriptor, $input);
  mcrypt_generic_deinit($descriptor);
  mcrypt_module_close($descriptor);
  $cipher = base64_encode($cipher);
  return $cipher;
}


/**
 * Decrypt an input string (128 bit AES) using the configured key and initialization vector.
 *
 * @param $input
 *   The string to decrypt.
 *
 * @return string
 *   The decrypt string.
 */
function secure_prepopulate_decrypt($cipher) {
  // The 128 bit key to use to decrypt the string.
  $key = secure_prepopulate_variable_get('secure_prepopulate_key', NULL);
  // The initialization vector to use to decrypt the string.
  $iv = secure_prepopulate_variable_get('secure_prepopulate_iv', NULL);
  if (!$key || !$iv) {
    drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
    watchdog('Secure Autofill', 'Cannot perform decryption because AES Key and IV have not been configured correctly.', NULL, WATCHDOG_CRITICAL);
    return FALSE;
  }
  $kv = array('key' => $key, 'iv' => $iv);
  $cipher = base64_decode($cipher);
  $descriptor = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', MCRYPT_MODE_CBC, '');
  mcrypt_generic_init($descriptor, $kv['key'], $kv['iv']);
  $decrypted_data = mdecrypt_generic($descriptor, $cipher);
  mcrypt_generic_deinit($descriptor);
  mcrypt_module_close($descriptor);
  // Account for some PHP AES shortcomings.
  $decrypted_data = _secure_prepopulate_pkcs5_unpad($decrypted_data);
  $decrypted_data = rtrim($decrypted_data);
  return $decrypted_data;
}

/**
 * Get the SPP key and vector.
 *
 * @return array|bool
 *   The key and vector in an array, or FALSE
 */
function secure_prepopulate_get_key_and_vector() {
  // The 128 bit key to use to decrypt the string.
  $key = variable_get('secure_prepopulate_key', NULL);
  // The initialization vector to use to decrypt the string.
  $iv = variable_get('secure_prepopulate_iv', NULL);
  if (!$key || !$iv) {
    watchdog('Secure Autofill', 'Cannot perform decryption because AES Key and IV have not been configured correctly.', NULL, WATCHDOG_CRITICAL);
    return FALSE;
  }
  return array('key' => $key, 'iv' => $iv);
}

/**
 * Decrypts query string paramaters.
 *
 * This function will attempt to decrypt a string with an
 * AES Key and IV that have been preconfigued.
 *
 * @param $cipher
 *   The cipher text to decrypt.
 */
function secure_prepopulate_decrypt_qs($cipher) {
  $raw_qs = secure_prepopulate_decrypt($cipher);
  return secure_prepopulate_parse_qs($raw_qs);
}

/**
 * Helper function, Parses the decrypted query string into an array.
 *
 * @param $qs
 *   The query string to parse in key/value pair format.
 */
function secure_prepopulate_parse_qs($qs) {
  $result = array();
  $segments = explode('&', $qs);
  // Loop over each field in the segement and extract the key/value pairs.
  if (count($segments)) {
    foreach ($segments as $segment) {
      $key_value = explode('=', $segment);
      if (isset($key_value[1])) {
        $result[$key_value[0]] = $key_value[1];
      } else {
        // No key given, so fall back to numeric index.
        $result[] = $key_value[0];
      }
    }
  }
  return $result;
}

/**
 * Helper function, gets variables without bootstrap.
 *
 * @param $name
 *   The var name to get.
 * @param $default
 *   The var to return if $name is not found.
 */
function secure_prepopulate_variable_get($name, $default = NULL) {
  // Use db_query here for performance reasons, see https://www.drupal.org/node/310075.
  $result = db_query("SELECT value FROM {variable} WHERE name = :name", array(":name" => $name))->fetchField();

  return isset($result) ? unserialize($result) : $default;
}

/**
 * Helper function, for padding text to PKCS5 specification.
 *
 * @param $text
 *   The text to pad.
 * @param $blocksize
 *   The size of the PKCS5 blocksize to use.
 */
function _secure_prepopulate_pkcs5_pad($text, $blocksize) {
  $pad = $blocksize - (strlen($text) % $blocksize);
  return $text . str_repeat(chr($pad), $pad);
}

/**
 * Helper function, to unpad PKCS5 padded text.
 *
 * @param $text
 *   The text to unpad.
 */
function _secure_prepopulate_pkcs5_unpad($text) {
  // Mcrypt adds bad characters at the end of the string. Remove them.
  $pad = ord($text{strlen($text) -1});
  if ($pad > strlen($text)) {
    return FALSE;
  }
  return substr($text, 0, -1 * $pad);
}

/**
 * Submit handler for forms that have been prepopulated.
 */
function secure_prepopulate_submit(&$form, &$form_state) {
  $node = $form['#node'];
  secure_prepopulate_clear_cookies($node->nid);
}

/**
 * Helper function, Clears the gs/af cookies.
 *
 * @param $nid
 *   The id of the node who's prepopulated data should be cleared.
 * @param $type
 *   Which type of cookies to clear, values: 'all' (default), 'af', 'gs'.
 */
function secure_prepopulate_clear_cookies($nid, $type = "all") {
  if ($type == "all" || $type == "af") {
    // Unset secure prepopulate hash.
    if (isset($_COOKIE['af-' . $nid])) {
      unset($_COOKIE['af-' . $nid]);
      // Empty value and old timestamp.
      setcookie('af-' . $nid, '', time() - 3600, '/');
    }
    // Unset user hash.
    if (isset($_COOKIE['af-' . $nid . '-hash'])) {
      unset($_COOKIE['af-' . $nid . '-hash']);
      setcookie('af-' . $nid . '-hash', '', time() - 3600, '/');
    }
  }
  if (($type == "all" || $type == "gs")) {
    // Unset gift string hash.
    if (isset($_COOKIE['gs-' . $nid])) {
      unset($_COOKIE['gs-' . $nid]);
      setcookie('gs-' . $nid, '', time() - 3600, '/');
    }
    // Unset user hash.
    if (isset($_COOKIE['gs-' . $nid . '-hash'])) {
      unset($_COOKIE['gs-' . $nid . '-hash']);
      setcookie('gs-' . $nid . '-hash', '', time() - 3600, '/');
    }
    // Unset default.
    if (isset($_COOKIE['gs-' . $nid . '-selected'])) {
      unset($_COOKIE['gs-' . $nid . '-selected']);
      setcookie('gs-' . $nid . '-selected', '', time() - 3600, '/');
    }
  }
}

/**
 * Determines if an encrypted query string has already been used.
 *
 * @param string $qs
 *   The query string to examine.
 * @param string $user_hash
 *   The unique user hash, used to ensure that users can still have their
 *   values decrypted for an otherwise expired string.
 *
 * @return bool.
 *   Whether the string is expired.
 */
function secure_prepopulate_is_expired($qs, $user_hash) {
  $result = db_query("SELECT COUNT(hash) FROM {secure_prepopulate_expired} WHERE hash = :hash AND userhash <> :userhash", array(':hash' => $qs, ":userhash" => $user_hash))->fetchField();
  // If no results it's a new query string or user has the unique
  // hash that allows them to continue using it.
  if ($result == 0) {
    return FALSE;
  }
  drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
  watchdog('Secure Autofill', 'Attempted use of encrypted query string @q', array('@q' => $qs), WATCHDOG_NOTICE);
  return TRUE;
}

/**
 * Helper function, expires query string so it cannot be used more than once.
 *
 * @param $qs
 *   The hash to expire.
 * @param $user_hash
 *   The unique user hash, used to ensure that users can still have their
 *   values decrypted for an otherwise expired string.
 */
function secure_prepopulate_expire($qs, $user_hash) {
  // If the "Pre-populated tokens never expire" setting is enabled then do not
  // set an expiration timestamp:
  if (secure_prepopulate_variable_get('secure_prepopulate_toggle_expiration', 0)) {
    return;
  }

  $result = db_query("SELECT COUNT(hash) FROM {secure_prepopulate_expired} WHERE hash = :hash AND userhash = :userhash", array(':hash' => $qs, ":userhash" => $user_hash))->fetchField();
  // If no results, create an entry.
  if ($result == 0) {
    $record = new stdClass();
    $record->hash = $qs;
    $record->expire_date = REQUEST_TIME;
    $record->userhash = $user_hash;
    drupal_write_record('secure_prepopulate_expired', $record);
  }
}

/**
 * Converts the dynamic ask amounts into an array of amount suitable for display.
 *
 * @param $amounts
 *   An unformatted array of ask amounts.
 * @param $show_other
 *   Flag to indicate whether or not the 'other' amount should be added.
 */
function _secure_prepopulate_parse_amounts($amounts, $show_other, $nid) {
  $amounts = explode('|', $amounts);
  $formatted_amounts = array();
  $all_valid = TRUE;

  // format the amounts
  foreach ($amounts as $amount) {
    // first, check to see if the value is numeric. if not, we have some bogus data.
    if (!is_numeric($amount) || $amount == 0) {
      $all_valid = FALSE;
    }
    // if the number has a decimal, retain it. otherwise format without decimals
    if (is_float($amount + 1)) { // implicit cast hack
      $formatted_amounts[$amount] = '$' . number_format($amount, 2, '.', ',');
    }
    elseif (is_integer($amount + 1)) {
      $formatted_amounts[$amount] = '$' . number_format($amount, 0, '', ',');
    }
  }
  // re-add 'other' if enabled
  if ($show_other) {
    $formatted_amounts['other'] = 'Other';
  }
  if ($all_valid) {
    return $formatted_amounts;
  }
  else {
    watchdog("Secure Autofill", "Amounts failed to validate.", NULL, WATCHDOG_ERROR);
    return FALSE;
  }
}


/**
 * Validates gift string amounts. Based on _dynamic_gift_strings_parse_amounts.
 */
function secure_prepopulate_validate_gs($gs) {
  if (!is_array($gs)) {
    return FALSE;
  }

  $valid = TRUE;

  // Validate amounts.
  if (array_key_exists('amounts', $gs)) {
    $amounts = explode('|', $gs['amounts']);
    // Validate the amounts.
    foreach ($amounts as $amount) {
      if (!is_numeric($amount) || $amount == 0) {
        $valid = FALSE;
      }
    }
  }

  // Validate amounts.
  if (array_key_exists('recurring_amounts', $gs)) {
    $recurring_amounts = explode('|', $gs['recurring_amounts']);
    // Validate the amounts.
    foreach ($recurring_amounts as $amount) {
      if (!is_numeric($amount) || $amount == 0) {
        $valid = FALSE;
      }
    }
  }

  return $valid;
}

/**
 * Implements hook_node_insert().
 *
 * Add the autofill flag to forms.
 */
function secure_prepopulate_node_insert($node) {
  $webform_node_types = variable_get('webform_node_types', array('webform'));
  if (in_array($node->type, $webform_node_types)) {
    // Adds some custom fields to new webforms.
    module_load_include('inc', 'secure_prepopulate', 'secure_prepopulate.components');
    secure_prepopulate_insert_components($node);
  }
  if (isset($node->gs_omit)) {
    secure_prepopulate_save_omitted_status($node, $node->gs_omit);
  }
}

/**
 * Implements hook_node_update().
 *
 * Save the node-specific global gift string settings.
 */
function secure_prepopulate_node_update($node) {
  if (isset($node->gs_omit)) {
    secure_prepopulate_save_omitted_status($node, $node->gs_omit);
  }
}

function secure_prepopulate_check_ggs_status($node) {
  $omitted = db_query('select ggs_omit from {secure_prepopulate_ggs} WHERE nid = :nid', array(':nid' => $node->nid))->fetchField();
   return $omitted;
}

function secure_prepopulate_save_omitted_status($node, $status) {
  db_merge('secure_prepopulate_ggs')
    ->key(array('nid' => $node->nid))
    ->fields(array(
      'nid' => $node->nid,
      'ggs_omit' => $status,
    ))
    ->execute();
}

/**
 * Helper function to generate user hash.
 *
 * @see user_password().
 */
function secure_prepopulate_user_hash($length = 16) {
  return substr(md5(microtime()), 0, $length);
}

/**
 * Implements hook_node_clone_alter().
 */
function secure_prepopulate_clone_node_alter(&$node, $context) {
  $omit = secure_prepopulate_check_ggs_status($context['original_node']);
  if ($omit) {
    $node->gs_omit = $omit;
  }
}
