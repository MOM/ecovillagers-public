<?php
/**
 * @file
 * Secure Autofill install/schema hooks.
 */

/**
 * Implements hook_uninstall().
 */
function secure_prepopulate_uninstall() {
  $secure_prepopulate_vars = array(
    'secure_prepopulate_key',
    'secure_prepopulate_iv',
    'secure_prepopulate_toggle_expiration',
    'secure_prepopulate_expired_date_limit',
    'secure_prepopulate_dynamic_gift_strings_never_expire',
    'secure_prepopulate_not_me',
  );
  // Delete secure autofill vars.
  foreach ($secure_prepopulate_vars AS $var) {
    if (variable_get($var, FALSE)) {
      variable_delete($var);
    }
  }
}

/**
 * Implements hook_requirements().
 */
function secure_prepopulate_requirements($phase) {
  $severity = REQUIREMENT_ERROR;
  $status = 'missing';
  // Check for mcrypt extension.
  if (extension_loaded("mcrypt")) {
    $severity = REQUIREMENT_OK;
    $status = 'installed';
  }
  $requirements = array(
    array(
      'title' => 'Secure Autofill',
      'description' => t('Secure Autofill requires that PHP Mcrypt extension be installed on the web server.'),
      'severity' => $severity,
      'value' => 'PHP Mcrypt extension ' . $status,
    ),
  );
  return $requirements;
}

/**
 * Implements hook_schema().
 */
function secure_prepopulate_schema() {
  $schema = array();
  $schema['secure_prepopulate_expired'] = array(
    'description' => 'Expired autofill strings.',
    'fields' => array(
      'hash' => array(
        'description' => 'The encrypted string',
        'type' => 'varchar',
        'length' => '800',
        'not null' => FALSE,
      ),
      'userhash' => array(
        'description' => 'Unique per-user hash',
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
      'expire_date' => array(
        'description' => 'When it expired',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'userhash' => array('userhash'),
      'expired' => array('expire_date'),
    ),
  );

  $schema['secure_prepopulate_ggs'] = array(
    'description' => 'Store per-node global gift string config.',
    'fields' => array(
      'nid' => array(
        'description' => 'Node id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'ggs_omit' => array(
        'description' => 'Omit ths node from ggs.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid'),
  );

  return $schema;
}

/**
 * Add indexes to tables.
 */
function secure_prepopulate_update_7001() {
  db_add_index('secure_prepopulate_expired', 'hash', array('hash'));
  db_add_index('secure_prepopulate_expired', 'expired', array('expire_date'));
}

/**
 * Add the secure preopoulate autofill field to existing webforms.
 */
function secure_prepopulate_update_7002(&$sandbox) {

  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['max'] = db_query('SELECT COUNT(nid) FROM {webform}')->fetchField();
    $sandbox['messages'] = array();
    $sandbox['current_node'] = -1;
  }

  $limit = 25;

  $nodes = db_select('webform', 'n')
    ->fields('n', array('nid'))
    ->orderBy('n.nid', 'ASC')
    ->where('n.nid > :nid', array(':nid' => $sandbox['current_node']))
    ->extend('PagerDefault')
    ->limit($limit)
    ->execute();

  foreach ($nodes as $node) {
    $sandbox['progress']++;
    $sandbox['current_node'] = $node->nid;

    $cid = db_query('select wc.cid from {webform_component} wc
      WHERE wc.nid = :nid AND wc.form_key = :key',
      array(':nid' => $node->nid, ':key' => 'secure_prepop_autofilled')
    )->fetchAssoc();

    if (!$cid) {
      $field = array(
        'nid' => $node->nid,
        'form_key' => 'secure_prepop_autofilled',
        'pid' => 0,
        'name' => t('Autofilled'),
        'type' => 'hidden',
        'value' => 0,
        'weight' => 13,
        'email' => 1,
        'extra' => array(
          'description' => '',
          'hidden_type' => 'hidden',
        ),
      );
      webform_component_insert($field);
    }
  }

  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max']) ? TRUE : ($sandbox['progress'] / $sandbox['max']);

  if ($sandbox['#finished']) {
    return t('Autofill field has been added to existing webforms.');
  }
}

/**
 * Remove old variables related to consolidation of secure prepop and dynamic gift strings.
 * Add new user hash column.
 */
function secure_prepopulate_update_7003() {
  // Remove hash index and add userhash index from secure_propulate_expired.
  db_drop_index('secure_prepopulate_expired', 'hash');

  // Lengthen hash column to 800.
  $hash = array(
    'description' => 'The encrypted string',
    'type' => 'varchar',
    'length' => '800',
    'not null' => FALSE,
  );

  db_change_field('secure_prepopulate_expired', 'hash', 'hash', $hash);

  // Copy old dynamic gift strings variable.
  $secure_prepopulate_vars = array(
      'dynamic_gift_strings_never_expire' => 'secure_prepopulate_dynamic_gift_strings_never_expire'
    );

  foreach($secure_prepopulate_vars AS $old => $new) {
    if (variable_get($old, FALSE)) {
      // Copy old settings to new.
      variable_set($new, variable_get($old));
      variable_del($old);
    }
  }

  // Remove vars that don't exist in our version upgrade of secure_prepopulate.
  variable_del('secure_prepopulate_precedence');
  variable_del('dynamic_gift_strings_send_alert');
  variable_del('dynamic_gift_strings_alert_email');

  // Remove system table entries for dynamic gift strings.
  $modules = array(
    'dynamic_gift_strings'
  );
  db_delete('system')
    ->condition('name', $modules, 'IN')
    ->condition('type', 'module')
    ->execute();

  // Remove secure prepopulate synonyms.
  db_drop_table('secure_prepopulate_synonyms');

  // Add new userhash column to secure prepopulate table.
  $spec = array(
    'description' => 'Unique per-user hash',
    'type' => 'varchar',
    'length' => '16',
    'not null' => FALSE,
  );

  db_add_field('secure_prepopulate_expired', 'userhash', $spec);

  // Add index for this field.
  db_add_index('secure_prepopulate_expired', 'userhash', array('userhash'));
}

/**
 * Enable JS module.
 */
function secure_prepopulate_update_7004() {
    module_enable(['js']);
}

/**
 *  Add ggs tracking table.
 */
function secure_prepopulate_update_7005() {
  $schema = module_invoke('secure_prepopulate', 'schema');
  if (db_table_exists('secure_prepopulate_ggs') == FALSE) {
    db_create_table('secure_prepopulate_ggs', $schema['secure_prepopulate_ggs']);
  }
}
