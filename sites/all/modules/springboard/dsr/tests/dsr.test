<?php

/**
 * @file
 * Simple tests for dsr
 */

/**
 * Sets up basic tools for testing DSR.
 */
class DsrTestCase extends DrupalWebTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'DSR',
      'description' => 'Sets up basic tools for testing DSR',
      'group' => 'DSR',
    );
  }

  /**
   * Implements setUp().
   */
  public function setUp() {
    parent::setUp(array('dsr'));
  }

  /**
   * Insert some donations and see that dsr_select returns the correct results.
   */
  public function testDsrSelect() {
    $status = 'fake status';
    $amount = 20.00;
    $total_count = 10;
    $timestamp = REQUEST_TIME;
    $one_hour = 60 * 60;
    $one_day = $one_hour * 24;

    $start_date = date('Y-m-d H:i:s', $timestamp);
    $end_date = date('Y-m-d H:i:s', $timestamp + $one_day);

    $total_amount = 0;

    for ($i = 0; $i < $total_count; $i++) {
      $amount = $amount + ($i * 2);
      $total_amount += $amount;
      $timestamp += $one_hour;
      $this->insertDonation($status, $amount, $timestamp);
    }

    $result = dsr_select($status, $start_date, $end_date);

    $this->assertEqual($result['total_count'], $total_count, 'Counts match.');
    $this->assertEqual($result['total_amount'], $total_amount, 'Amounts match.');

    // Different status.
    $result = dsr_select('different status', $start_date, $end_date);
    $this->assertEqual($result['total_count'], 0, 'Counts match.');
    $this->assertEqual($result['total_amount'], 0, 'Amounts match.');

    // Different timeframe.
    $one_day_before = date('c', $timestamp - $one_day);
    $result = dsr_select($status, $one_day_before, $start_date);
    $this->assertEqual($result['total_count'], 0, 'Counts match.');
    $this->assertEqual($result['total_amount'], 0, 'Amounts match.');
  }

  /**
   * Confirm we get an empty array from dsr_get_orders when no orders match.
   */
  public function testDsrGetOrders() {
    $start = date('Y-m-d H:i:s', REQUEST_TIME);
    $end = date('Y-m-d H:i:s', REQUEST_TIME + 3600);

    // When no orders match the criteria, we should get an empty array
    // and not a notice about an undefined variable.
    $result = dsr_get_orders('fake status', $start, $end);

    $this->assertEqual($result, array(), 'No matching orders found.');
  }

  /**
   * Adds a commerce order and commerce payment transaction.
   *
   * @param string $status
   *   The donation status.
   * @param float $amount
   *   The charge amount.
   * @param int $timestamp
   *   A timestamp to fake.
   */
  protected function insertDonation($status = 'payment_received', $amount = 20.00, $timestamp = REQUEST_TIME) {
    $amount = $amount * 100;

    // Create a new order.
    $new_order = commerce_order_new(1);
    $new_order->order_number = $order_number = $this->randomName(10);
    $new_order->mail = 'example@example.com';
    $new_order->hostname = $this->randomName(10);
    $new_order->status = $status;
    $return = commerce_order_save($new_order);
    $this->assertIdentical($return, SAVED_NEW, 'New order saved.');

    $new_transaction = commerce_payment_transaction_new('commerce_payment_example', $new_order->order_id);

    $new_transaction->instance_id = 'commerce_payment_example|commerce_payment_commerce_payment_example';
    $new_transaction->amount = $amount;
    $new_transaction->currency_code = 'USD';
    $new_transaction->status = 'success';
    $new_transaction->message = 'Name: @name';
    $new_transaction->message_variables = array('@name' => 'First Last');

    $return = commerce_payment_transaction_save($new_transaction);

    $this->assertIdentical($return, SAVED_NEW, 'New transaction saved.');

    // Mess with the changed timestamp for our tests.
    $query = db_update('commerce_payment_transaction');
    $query->fields(array('changed' => $timestamp))
      ->condition('transaction_id', $new_transaction->transaction_id)
      ->execute();

  }
}
