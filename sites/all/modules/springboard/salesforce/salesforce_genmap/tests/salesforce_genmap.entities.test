<?php

/**
 * @file
 * Simple tests for salesforce_genmap
 */

module_load_include('test', 'salesforce_genmap', 'tests/salesforce_genmap');

/**
 * Tests basic set up for mapping salesforce objects to webforms.
 */
class SalesforceGenmapEntitiesTestCase extends SalesforceGenmapTestCase {

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Mapping Entities',
      'description' => 'Ensure that the object entity map functions properly.',
      'group' => 'Salesforce Generic Mapping',
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp($modules = array(), $permissions = array()) {
    parent::setUp($modules, $permissions);

    // Create an example map.
    $this->example_map = array(
      'nid' => 3,
      'map_handler' => 'salesforce_genmap',
      'salesforce_object_type' => 'bar',
      'salesforce_record_type' => 'baz',
      'field_map' => array(
        'foo' => 'bar',
        'baz' => array(
          'bang' => 'boom',
          'fizz' => 'buzz',
        ),
        'hello' => 'world',
      ),
      'sync_options' => array(
        'insert' => TRUE,
        'update' => FALSE,
        'delete' => FALSE,
      ),
      'status' => TRUE,
    );
  }

  /**
   * Implementation of tearDown().
   */
  public function tearDown() {
    parent::tearDown();
  }

  /**
   * Test the salesforce_genmap_map entity.
   */
  public function testEntity() {
    $nid = $this->example_map['nid'];

    // Map entity type exists.
    $entity_info = entity_get_info('salesforce_genmap_map');
    $this->assertTrue(isset($entity_info['label']), 'Entity has a label');
    $this->assertEqual('Salesforce Object Map', $entity_info['label'], 'Entity has expected label.');

    // Create a salesforce_genmap_map entity object.
    $test_map = entity_create('salesforce_genmap_map', $this->example_map);
    $this->assertEqual('salesforce_genmap_map', $test_map->entityType(), 'Creating a new entity object works as expected.');

    // Save the entity to the database.
    entity_save('salesforce_genmap_map', $test_map);
    $new_map_id = _salesforce_genmap_get_map_id_by_nid_module($nid, 'salesforce_genmap');
    $test_map_db = entity_load('salesforce_genmap_map', array($new_map_id));
    $this->assertEqual('bar', $test_map_db[$new_map_id]->salesforce_object_type, 'Newly created entity has the correct object type.');

    // Save the entity again and see it be updated.
    $result = entity_save('salesforce_genmap_map', $test_map);
    $this->assertEqual(SAVED_UPDATED, $result, 'Re-saved entity saved as updated.');

    // Delete the entity from the database.
    entity_delete('salesforce_genmap_map', $new_map_id);
    $all_entities = entity_load('salesforce_genmap_map');
    $this->assertTrue(empty($all_entities));
  }

  /**
   * Tests for salesforce_genmap_crud objects.
   */
  public function testMapCrud() {
    $nid = $this->example_map['nid'];

    // salesforce_genmap_save_map() new.
    $result = salesforce_genmap_save_map($this->example_map);
    $this->assertEqual(SAVED_NEW, $result, 'New map saved as expected.');

    // salesforce_genmap_load_map().
    $map = salesforce_genmap_load_map($nid);
    $this->assertEqual('bar', $map->salesforce_object_type, 'Newly created map has the correct object type.');

    // salesforce_genmap_save_map() update entity.
    $result = salesforce_genmap_save_map($map);
    $this->assertEqual(SAVED_UPDATED, $result, 'Re-saved map entity saved as updated.');

    // salesforce_genmap_save_map() update array.
    $result = salesforce_genmap_save_map($this->example_map);
    $this->assertEqual(SAVED_UPDATED, $result, 'Re-saved map array saved as updated.');

    // salesforce_genmap_delete_map().
    $this->assertTrue(salesforce_genmap_delete_map($nid), 'Delete command processed as expected.');
    $this->assertFalse(salesforce_genmap_load_map($nid), 'The deleted map cannot be found in the table.');
  }
}
