<?php

/**
 * Implements hook_views_api().
 */
function springboard_views_views_api() {
  return array('api' => 2);
}

/**
 * Implements hook_views_pre_render().
 * When rendering one of our own views, insert a count into the header.
 */
function springboard_views_views_pre_render(&$view) {
  // Apply CSS to reports views:
  $reports_views = array('sbv_donations', 'sb_generic_webform_results');
  if (in_array($view->name, $reports_views)) {
    drupal_add_css(drupal_get_path('module', 'springboard_views') . '/css/springboard_views.css');
  }

  // Adjust output for the site-wide donations view:
  if ($view->name == 'sbv_donations') {
    $payment_methods = commerce_payment_methods();
    foreach ($view->result as $key => $result) {
      // Make the gateway field display its human-readable version:
      if (isset($result->fundraiser_donation_gateway)) {
        $current_method_info = explode('|', $result->fundraiser_donation_gateway);
        if (isset($current_method_info[0]) && isset($payment_methods[$current_method_info[0]]['short_title'])) {
          $result->fundraiser_donation_gateway = $payment_methods[$current_method_info[0]]['short_title'];
        }
      }
      // Adjust the Recur. field output:
      if (isset($result->commerce_order_fundraiser_donation_order_id)) {
        $recur_output = isset($result->fundraiser_sustainers_sustainer_key) ? t('Yes') : t('No');
        $result->fundraiser_sustainers_sustainer_key = $recur_output;
      }
    }
  }

  // An array of view names and a pretty name for the status of the items
  $sbv_views = array(
    'sbv_batch' => 'Batched',
    'sbv_queue' => 'Queued',
    'sbv_retry_queue' => 'Retry',
    'sbv_permanent_failure' => 'Failed',
  );
  if (array_key_exists($view->name, $sbv_views)) {
    $view->attachment_before .= t('!status Items: !count items',
      array(
        '!status' => $sbv_views[$view->name],
        '!count' => $view->total_rows,
      ));
  }

  if ($view->name == 'sbv_forms') {
    // If a non-webform-user form lacks an internal name field, provide a
    // value based on title.
    $displays = array('block_2', 'block_3', 'page_2');
    if (in_array($view->current_display, $displays)) {
      foreach ($view->result as $key => $result) {
        $has_internal = FALSE;
        $field_name = NULL;
        foreach ($result as $field_name => $field_value) {
          if (strpos($field_name, 'internal_name') !== FALSE
          && strpos($field_name, 'field_data_field') === FALSE) {
            if (!empty($field_value)) {
              $has_internal = TRUE;
            }
          }
        }
        if (!$has_internal) {
          if (isset($result->node_type) && !fundraiser_is_donation_type($result->node_type)) {
            $view->result[$key]->field_field_webform_user_internal_name[0]['rendered']['#markup'] = isset($result->node_title) ? check_plain($result->node_title) : '';
          }
        }
      }
    }
  }
}

/**
 * Implements hook_menu_alter().
 */
function springboard_views_menu_alter(&$items) {
  // Override webform's original results tab with Views-based results.
  $weight = isset($items['node/%webform_menu/webform-results']['weight']) ? $items['node/%webform_menu/webform-results']['weight'] : 1000;
  $items['node/%node/webform-results'] = array(
    'title' => 'Results',
    'page callback' => '_springboard_views_webform_results_page_content',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access all webform results'),
    'description' => 'Browse recent webform results.',
    'type' => MENU_LOCAL_TASK,
    'weight' => $weight,
  );
}

/**
 * Implements hook_date_api_tables().
 *
 * Tell Date which tables to look for date fields in.
 */
function springboard_views_date_api_tables() {
  return array('sf_queue', 'sf_retry_queue', 'sf_permanent_failure', 'sf_batch');
}

/**
 * Implements hook_date_api_fields().
 * Tell Date about our date fields.
 */
function springboard_views_date_api_fields($field) {
  $sf_queue_created = array(
    // The type of date: DATE_UNIX, DATE_ISO, DATE_DATETIME.
    'sql_type' => DATE_UNIX,
    // Timezone handling options: 'none', 'site', 'date', 'utc'.
    'tz_handling' => 'site',
    // Granularity of this date field's db data.
    'granularity' => array('year', 'month', 'day', 'hour', 'minute'),
  );
  $sf_retry_queue_created = array(
    'sql_type' => DATE_UNIX,
    'tz_handling' => 'site',
    'granularity' => array('year', 'month', 'day', 'hour', 'minute'),
  );
  $sf_retry_queue_retry_date = array(
    'sql_type' => DATE_UNIX,
    'tz_handling' => 'site',
    'granularity' => array('year', 'month', 'day', 'hour', 'minute'),
  );
  $sf_permanent_failure_date_added = array(
    'sql_type' => DATE_UNIX,
    'tz_handling' => 'site',
    'granularity' => array('year', 'month', 'day', 'hour', 'minute'),
  );
  $sf_batch_created = array(
    'sql_type' => DATE_UNIX,
    'tz_handling' => 'site',
    // Array of "table.field" values for related fields that should be loaded automatically in the Views SQL.
    'related_fields' => array('sf_batch.start_time', 'sf_batch.end_time'),
    'granularity' => array('year', 'month', 'day', 'hour', 'minute'),
  );
  $sf_batch_start_time = array(
    'sql_type' => DATE_UNIX,
    'tz_handling' => 'site',
    'fromto' => array('sf_batch_start_time', 'sf_batch_end_time'),
    'granularity' => array('year', 'month', 'day', 'hour', 'minute'),
  );
  // END FIELD : just tell Date how to read from db, and how to handle TZ
  $sf_batch_end_time = array(
    'sql_type' => DATE_UNIX,
    'tz_handling' => 'site',
  );
  switch ($field) {
    case 'sf_queue.created':
      return $sf_queue_created;
      break;
    case 'sf_retry_queue.created':
      return $sf_retry_queue_created;
      break;
    case 'sf_retry_queue.retry_date':
      return $sf_retry_queue_retry_date;
      break;
    case 'sf_permanent_failure.date_added':
      return $sf_permanent_failure_date_added;
      break;
    case 'sf_batch.created':
      return $sf_batch_created;
      break;
    case 'sf_batch.start_time':
      return $sf_batch_start_time;
      break;
    case 'sf_batch.end_time':
      return $sf_batch_end_time;
      break;
  }
}

/**
 * Implements hook_views_bulk_operations_object_info().
 */
function springboard_views_views_bulk_operations_object_info() {
  $object_info = array(
    'sf_permanent_failure' => array(
      'type' => 'sf_permanent_failure',
      'base_table' => 'sf_permanent_failure',
      'load' => '_springboard_views_sf_permanent_failure_load',
      'oid' => 'id',
      'title' => 'oid',
    ),
    'sf_retry_queue' => array(
      'type' => 'sf_retry_queue',
      'base_table' => 'sf_retry_queue',
      'load' => '_springboard_views_sf_retry_queue_load',
      'oid' => 'id',
      'title' => 'oid',
    ),
  );
  return $object_info;
}

/**
 * Implements hook_action_info().
 */
function springboard_views_action_info() {
  return array(
    'springboard_views_sf_permanent_failure_retry_action' => array(
      'label' => t('Retry'),
      'type' => 'sf_permanent_failure',
      'configurable' => FALSE,
      'triggers' => array(
        'sf_permanent_failure_retry',
      ),
    ),
    'springboard_views_sf_permanent_failure_delete_action' => array(
      'label' => t('Delete'),
      'type' => 'sf_permanent_failure',
      'configurable' => FALSE,
      'triggers' => array(
        'sf_permanent_failure_delete',
      ),
    ),
    'springboard_views_sf_retry_queue_retry_action' => array(
      'label' => t('Retry'),
      'type' => 'sf_retry_queue',
      'configurable' => FALSE,
      'triggers' => array(
        'sf_retry_queue_retry',
      ),
    ),
    'springboard_views_sf_retry_queue_delete_action' => array(
      'label' => t('Delete'),
      'type' => 'sf_retry_queue',
      'configurable' => FALSE,
      'triggers' => array(
        'sf_retry_queue_delete',
      ),
    ),
  );
}

/**
 * Implements hook_springboard_admin_alias_patterns().
 */
function springboard_views_springboard_admin_alias_patterns() {
    return array(
    'admin/springboard/reports/contacts' => array(
      'path' => array(
        'regex' => '|^/admin/springboard/reports/contacts$|',
        'replacement' => 'admin/springboard/reports/contacts',
      ),
      'alias' => array(
        'regex' => '|^springboard/reports/contacts$|',
        'replacement' => 'springboard/reports/contacts',
      ),
    ),
    // Salesforce reports.
    'admin/springboard/reports/integration-reports' => array(
      'path' => array(
        'regex' => '|^/admin/springboard/reports/integration-reports(/.*)?$|',
        'replacement' => 'admin/springboard/reports/integration-reports$1',
      ),
      'alias' => array(
        'regex' => '|^springboard/reports/integration-reports(/.*)?$|',
        'replacement' => 'springboard/reports/integration-reports$1',
      ),
    ),
  );
}

function springboard_views_springboard_admin_admin_menu_items_alter(&$items) {
  // Top Level: Reports.
  $items['admin/springboard/reports'] = array(
    'link_path' => 'admin/springboard/reports',
    'link_title' => t('Reports'),
    'menu_name' => 'springboard_admin_menu',
    'expanded' => 1,
    'customized' => 1,
    'weight' => -40,
    '_children' => array(),
  );

  // Reports > Recent Donations
  $items['admin/springboard/reports']['_children']['admin/springboard/reports/donations'] = array(
    'link_path' => 'admin/springboard/reports/donations',
    'link_title' => t('Recent Donations'),
    'menu_name' => 'springboard_admin_menu',
    'expanded' => 0,
    'customized' => 1,
    'weight' => -100,
    '_childen' => array(),
  );

  // Disable the link to "all-time donations" report, per this: https://app.assembla.com/spaces/springboard/tickets/2169
  /* if (module_exists('springboard_dw')) {
    $items['admin/springboard/reports']['_children']['warehouse/reports/donations'] = array(
      'link_path' => 'warehouse/reports/donations',
      'link_title' => 'All-Time Donations',
      'menu_name' => 'springboard_admin_menu',
      'expanded' => 0,
      'customized' => 1,
      'weight' => -90,
      '_childen' => array(),
    );
  } */

  // Reports > Active Springboard Contacts
  $items['admin/springboard/reports']['_children']['active_springboard_contacts'] = array(
    'link_path' => 'admin/springboard/reports/contacts',
    'link_title' => t('Active Springboard Contacts'),
    'menu_name' => 'springboard_admin_menu',
    'expanded' => 0,
    'customized' => 1,
    'weight' => -80,
    '_children' => array(),
  );
  // Reports > Data Integration 
  $items['admin/springboard/reports']['_children']['admin/springboard/reports/integration-reports'] = array(
    'link_path' => 'admin/springboard/reports/integration-reports',
    'link_title' => t('Data Integration'),
    'menu_name' => 'springboard_admin_menu',
    'expanded' => 0,
    'customized' => 1,
    'weight' => -60,
    '_children' => array(),
  );
  // Reports > Integration Reports > Batch Log.
  $items['admin/springboard/reports']['_children']['admin/springboard/reports/integration-reports']['_children']['admin/springboard/reports/integration-reports/batch'] = array(
    'link_path' => 'admin/springboard/reports/integration-reports/batch',
    'link_title' => 'Batch Log',
    'menu_name' => 'springboard_admin_menu',
    'expanded' => 0,
    'customized' => 1,
    'weight' => 0,
  );
  // Reports > Integration Reports > Batch Item Log.
  $items['admin/springboard/reports']['_children']['admin/springboard/reports/integration-reports']['_children']['admin/springboard/reports/integration-reports/item'] = array(
    'link_path' => 'admin/springboard/reports/integration-reports/item',
    'link_title' => 'Item Log',
    'menu_name' => 'springboard_admin_menu',
    'expanded' => 0,
    'customized' => 1,
    'weight' => 1,
  );
  // Reports > Integration Reports > Queue.
  $items['admin/springboard/reports']['_children']['admin/springboard/reports/integration-reports']['_children']['admin/springboard/reports/integration-reports/queue'] = array(
    'link_path' => 'admin/springboard/reports/integration-reports/queue',
    'link_title' => 'Queue',
    'menu_name' => 'springboard_admin_menu',
    'expanded' => 0,
    'customized' => 1,
    'weight' => 2,
  );
}

/**
 * Helper function, returns a list of the available 'drupal_type' field values.
 */
function springboard_views_sf_drupal_types() {
  static $drupal_types = array();
  if (empty($drupal_types)) {
    $result = db_query('SELECT DISTINCT drupal_type FROM {salesforce_management_object_map} ' .
      'WHERE drupal_type IS NOT NULL');
    while ($drupal_type = $result->fetchField()) {
      $drupal_types[$drupal_type] = $drupal_type;
    }
  }
  return $drupal_types;
}

/**
 * Helper function, returns a list of the possible gateway responses.
 *
 * @deprecated Used to be an options callback for sustainers views data.
 *             Doesn't appear to be used anywhere else.
 */
function springboard_views_gateway_response_options() {
  return array(
    'success' => t('Success'),
    'canceled' => t('Canceled'),
    'failed' => t('Failed'),
    'skipped' => t('Skipped'),
  );
}

/**
 * Load object from the sf_permanent_failure table
 */
function _springboard_views_sf_permanent_failure_load($id) {
  return db_fetch_object(db_query('SELECT * FROM {sf_permanent_failure} ' .
    'WHERE id = :id', array(':id' => $id)));
}

/**
 * Load object from the sf_retry_queue table
 */
function _springboard_views_sf_retry_queue_load($id) {
  return db_fetch_object(db_query('SELECT * FROM {sf_retry_queue} WHERE ' .
    'id = :id', array(':id' => $id)));
}

/**
 * Action to move an object back into the queue from the sf_permanent_failure table
 */
function springboard_views_sf_permanent_failure_retry_action($object, $context) {
  sf_queue_insert($object->oid, $object->type, $object->action);
  db_delete('sf_permanent_failure')
  ->condition('id', $context['row']->id)
  ->execute();
}

/**
 * Action to delete an item from the sf_permanent_failure table
 */
function springboard_views_sf_permanent_failure_delete_action($object, $context) {
  db_delete('sf_permanent_failure')
  ->condition('id', $context['row']->id)
  ->execute();
}

/**
 * Action to move an object back into the queue from the sf_retry_queue table
 */
function springboard_views_sf_retry_queue_retry_action($object, $context) {
  sf_queue_insert($object->oid, $object->type, $object->action);
  db_delete('sf_retry_queue')
  ->condition('id', $context['row']->id)
  ->execute();
}

/**
 * Action to delete an item from the sf_retry_queue table
 */
function springboard_views_sf_retry_queue_delete_action($object, $context) {
  db_delete('sf_retry_queue')
  ->condition('id', $context['row']->id)
  ->execute();
}

/**
 * Implements hook_springboard_dashboard_panes().
 *
 * Add available views as options on the Springboard dashboard.
 */
function springboard_views_springboard_dashboard_panes() {
  global $base_url;
  $panes['springboard_notes_feed'] = array(
    'label' => t('Springboard Notes'),
    'description' => t('XML feed view from jr.com'),
    'content' => '' .
      (module_exists('views') ? views_embed_view('sbv_notes', 'block') : t('Please enable the Views module to improve your Springboard experience.')),
    'position' => 'column_right',
    'weight' => 3,
  );
  // Create Form listing panes grouping the views argument by Fundraiser
  // or webform node types.
  $node_types = node_type_get_types();
  $fundraiser_types = array();
  $webform_types = array();
  $webform_node_types = variable_get('webform_node_types', array('webform'));
  $allowed_types = array_filter(variable_get('springboard_admin_allowed_form_types', array_keys(_springboard_admin_enabled_form_types())));

  foreach ($node_types as $type) {
    if (fundraiser_is_donation_type($type->type) && in_array($type->type, $allowed_types)) {
      $fundraiser_types[] = $type->type;
    }
    elseif (
      in_array($type->type, $allowed_types)
      && (!fundraiser_is_donation_type($type->type) && in_array($type->type, $webform_node_types))
    ) {
      $webform_types[] = $type->type;
    }
  }

  drupal_alter('springboard_views_springboard_dashboard_panes', $webform_types, $fundraiser_types);

  $donation_pane_access = FALSE;
  if (module_exists('springboard_admin') && springboard_admin_access_donation_form_pages()) {
    $donation_pane_access = TRUE;
  }

  if ($donation_pane_access) {
    $panes['springboard_recent_donation_forms'] = array(
      'label' => t('Recent donation forms'),
      'description' => t('Configuration and submissions summary for recently created or updated springboard donation forms.'),
      'content' => '<h2>' . t('Recent donation forms') . '</h2>' .
        (module_exists('webform') && user_access('create donation_form content') ? l(t('Create donation form'), $base_url . '/node/add/donation-form', array(
          'attributes' => array(
            'class' => array(
              'button',
              'add-button',
            ),
          ),
        )) : '') .
        (module_exists('views') ? views_embed_view('sbv_forms', 'block_4', implode('+', $fundraiser_types)) : t('Please enable the Views module to improve your Springboard experience.')) .
        l(t('View All Donation Forms'), 'admin/springboard/donation-forms/all', array('attributes' => array('class' => array('more-link button more-button')))),
      'position' => 'column_left',
      'weight' => 0,
    );
  }

  $webform_pane_access = FALSE;
  if (module_exists('springboard_admin') && springboard_admin_access_form_pages()) {
    $webform_pane_access = TRUE;
  }

  if ($webform_pane_access) {
    $panes['springboard_recent_forms'] = array(
      'label' => t('Recent forms'),
      'description' => t('Configuration and submissions summary for recently created or updated springboard forms.'),
      'content' => '<h2>' . t('Recent forms') . '</h2>' .
        (module_exists('fundraiser') && user_access('create webform content') ? l(t('Create form'), $base_url . '/node/add/webform', array(
          'attributes' => array(
            'class' => array(
              'button',
              'add-button',
            ),
          ),
        )) : '') .
        (module_exists('views') ? views_embed_view('sbv_forms', 'block_3', implode('+', $webform_types)) : t('Please enable the Views module to improve your Springboard experience.')) .
        l(t('View All Forms'), 'admin/springboard/forms/all', array('attributes' => array('class' => array('more-link button more-button')))),
      'position' => 'column_left',
      'weight' => 2,
    );
  }
  return $panes;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function springboard_views_form_views_exposed_form_alter(&$form, &$form_state) {
  if (isset($form['#id']) && $form['#id'] == 'views-exposed-form-sbv-donations-page') {
    // Clean up presentation of order status options:
    foreach ($form['status']['#options'] as $status_key => $status_label) {
      $form['status']['#options'][$status_key] = preg_replace('/\(.*?\)/s', '', $status_label);
    }

    // Per this ticket, commenting out the dynamically generated value: https://app.assembla.com/spaces/springboard/tickets/2144
    // Add dynamically generated prefix text to the donations report:
    /*    $prefix_text = t('Springboard Donations');
    $oldest_order_time = db_query("SELECT created FROM {commerce_order} WHERE created > 0 ORDER BY created LIMIT 1")
      ->fetchField();
    if ($oldest_order_time) {
      $days = floor((time() - $oldest_order_time) / 60 / 60 / 24);
      $prefix_text = '<h2>' . t('Springboard Donations - past') . ' ' . $days . ' ' . format_plural($days, 'day', 'days') . '</h2>';
    }
    $form['#prefix'] = $prefix_text; */
    $form['#prefix'] = '<h2>' . t('Search Recent Donations') . '</h2>';
    $form['#attached']['js'][] = drupal_get_path('module', 'springboard_views') . '/js/springboard_views.js';
  }
  // When filtering by expiry status, display the "- Any -" option as "- All -":
  if (isset($form['expired']['#options']['All'])) {
    $form['expired']['#options']['All'] = '- ' . t('All') . ' -';
  }
  if (isset($form['status']['#options']['All'])) {
    $form['status']['#options']['All'] = '- ' . t('All') . ' -';
  }
}

/**
 * Markup for the overwritten webform result page:
 */
function _springboard_views_webform_results_page_content($node) {
  $output = '';
  $form = array();

  if (!isset($node->type)) {
    return;
  }

  if (in_array($node->type, array('sba_message_action', 'sba_social_action', 'petition'))) {
    $header_view_name = 'springboard_dw_action_stats_report';
    $header_view_display = 'block';
  }
  elseif (fundraiser_is_donation_type($node->type)) {
    $table_title = t('Search Recent Donations');
    $header_view_name = 'springboard_dw_donation_stats_report';
    $header_view_display = 'block_1';
    $table_view_name = 'sbv_donations';
    $table_view_display = 'page_2';
  }

  // Display a generic webform results table for other node types:
  if (!isset($table_view_name)) {
    $table_title = t('Search Recent Submissions');
    $table_view_name = 'sb_generic_webform_results';
    $table_view_display = 'page';
  }

  // Add the DW-based, lifetime performance stats at the top:
  if (isset($header_view_name)) {
    $view = views_get_view($header_view_name);
    if (isset($view) && $view != FALSE && is_object($view) && $view->disabled != TRUE) {
      $view->set_display($header_view_display);
      $view->pre_execute(array($node->nid));
      $view->execute();
      $title = isset($view->build_info['title']) ? $view->build_info['title'] : t('Lifetime Performance');
      $view_content = $view->render();
      $form['springboard_dw_lifetime_stats_content'] = array(
        '#type' => 'fieldset',
        '#title' => $title,
        '#description' => $view_content,
        '#attributes' => array('class' => array('sb-webform-results-filters')),
      );
    }
  }

  // Add the table views:
  $view = views_get_view($table_view_name);
  if (isset($view) && $view != FALSE && is_object($view) && $view->disabled != TRUE) {
    $view->set_display($table_view_display);
    $view->pre_execute(array($node->nid));
    $view->execute();
    // Determine how old submissions are:
    /* $oldest_order_time = db_query("SELECT submitted FROM {webform_submissions} WHERE nid = :nid AND submitted > 0 ORDER BY submitted LIMIT 1",
      array(':nid' => $node->nid))
      ->fetchField();
    $title = t('Filter Recent Submissions');
    if ($oldest_order_time) {
      $days = floor((time() - $oldest_order_time) / 60 / 60 / 24);
      $table_title = t('Filter Recent Submissions') . ' - ' . t('past') . ' ' . format_plural($days, 'day', $days . ' days');
    } */
    $view_content = $view->render();
    $form['sb-results-tab-override-content'] = array(
      '#type' => 'fieldset',
      '#title' => $table_title,
      '#description' => $view_content,
      '#collapsible' => FALSE,
      '#attributes' => array('class' => array('sb-webform-results-table')),
    );
  }
  if (!empty($form)) {
    drupal_add_css(drupal_get_path('module', 'fundraiser_webform') . '/css/webform-results-tab.css', 'file');
    drupal_add_js(drupal_get_path('module', 'springboard_views') . '/js/springboard_views.js', 'file');
    $output = drupal_render($form);
  }

  // Ensure path references point to the node results path, not the default page view path for this view:
  if (isset($view->display_handler->options['path'])) {
    $path_pattern = $view->display_handler->options['path'];
    $unaltered_path = str_replace('%', $node->nid , $path_pattern);
    $output = str_replace($unaltered_path, 'node/' . $node->nid . '/results', $output);
  }

  return '<div id="sb-webform-results-override-wrapper">' . $output . '</div>';
}
