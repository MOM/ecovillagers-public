<?php
/**
 * @file
 * Springboard Advocacy installation functions.
 */

/**
 * Implements hook_requirements().
 *
 * Make sure the Advocacy API php-sdk exists
 *
 * @param $phase
 * @return mixed
 */
function springboard_advocacy_requirements($phase) {
  $t = get_t();

  $requirements['springboard_advocacy'] = array(
    'title' => $t('Springboard advocacy'),
    'value' => 'Version 1',
  );

  drupal_load('module', 'libraries');
  $lib = libraries_detect('springboard_advocacy');

  if ($phase == 'runtime' && !empty($lib['installed'])) {
    $requirements['springboard_advocacy']['severity'] = REQUIREMENT_OK;
  }
  elseif($phase == 'runtime') {
    $requirements['springboard_advocacy']['severity'] = REQUIREMENT_ERROR;
    $requirements['springboard_advocacy']['description'] = 'Springboard Advocacy library not installed';
  }

  return $requirements;
}


/**
 * Implements hook_schema().
 *
 * Table to save unique action IDs
 */
function springboard_advocacy_schema() {

  // Store a unique ID for use with advocacy server
  $schema['sba_form_id'] = array(
    'description' => 'Store messaging information.',
    'fields' => array(
      'nid' => array(
        'description' => 'messages node id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'advocacy_id' => array(
        'description' => 'form unique ID',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'precedence' => array(
        'description' => 'Use precedence for messages attached to this form',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('nid'),
  );
  // Opt in tracking table.
  $schema['springboard_action_opt_in'] = array(
    'description' => 'Store action optin.',
    'fields' => array(
      'sid' => array(
        'description' => 'Webform submission id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => 'Message action node id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'Signer user id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'opt_in' => array(
        'description' => 'Track user opt-in to show their signature per message action.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'Submission timestamp',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'first_name' => array(
        'description' => 'Signer first name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'last_name' => array(
        'description' => 'Signer last name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'mail' => array(
        'description' => 'Signer email.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'zip' => array(
        'description' => 'Signer zip code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'city' => array(
        'description' => 'Signer city.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'state' => array(
        'description' => 'Signer state abbreviation.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'state_full' => array(
        'description' => 'Signer state.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),
    ),
    'primary key' => array('sid'),
  );

  // Opt in tracking table.
  $schema['springboard_action_opt_in_block'] = array(
    'description' => 'Store action optin.',
    'fields' => array(
      'nid' => array(
        'description' => 'Action node id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'visibility' => array(
        'description' => 'Track user opt-in to show their signature per message action.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid'),
  );

  // Store a unique ID for use with advocacy server.
  $schema['sba_message_action_confirm'] = array(
    'description' => 'Store message action confirmation state.',
    'fields' => array(
      'nid' => array(
        'description' => 'messages node id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'custom_confirmation' => array(
        'description' => 'confirmation toggle state',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'fail_message' => array(
        'description' => 'confirmation fail message',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('nid'),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function springboard_advocacy_uninstall() {
  module_load_include('inc', 'springboard_advocacy', 'includes/install/springboard_advocacy.install_taxonomy');
  _springboard_advocacy_delete_legislative_vocab();
}

 /**
  *  Add springboard_advocacy action id table
  */
function springboard_advocacy_update_7001() {
  $schema = module_invoke('springboard_advocacy', 'schema');
  if(db_table_exists('sba_form_id') == FALSE) {
    db_create_table('sba_form_id', $schema['sba_form_id']);
  }
}

/**
 * rename alert table to actions.
 */
function springboard_advocacy_update_7004() {
  if(db_table_exists('springboard_advocacy_alert_id') != FALSE && db_table_exists('sba_form_id') == FALSE) {
    db_rename_table('springboard_advocacy_alert_id', 'sba_form_id');
  }
  else if(db_table_exists('springboard_advocacy_alert_id') && db_table_exists('sba_form_id')){
    db_drop_table('springboard_advocacy_alert_id');
  }
}

/**
 * Add precedence field the sba_form_id table
 */
function springboard_advocacy_update_7005() {
  $schema = module_invoke('springboard_advocacy', 'schema');
  if(db_field_exists('sba_form_id', 'precedence') == FALSE) {
    db_add_field('sba_form_id', 'precedence', $schema['sba_form_id']['fields']['precedence']);
  }
}

/**
 * rename alert var to action
 */
function springboard_advocacy_update_7006() {
  $types = array('springboard_petition', 'sba_message_action');
  variable_set('springboard_advocacy_goal_types', $types);
}

/**
 * Delete the legislative issues vocab if actions is not enabled.
 */
function springboard_advocacy_update_7007() {
  if (module_exists('taxonomy') && !module_exists('sba_message_action')) {
    foreach (taxonomy_get_vocabularies() as $vocab) {
      if ($vocab->machine_name == 'sba_legislative_issues') {
        taxonomy_vocabulary_delete($vocab->vid);
      }
    }
  }
}

/**
 * Add message action confirmation table
 */
function springboard_advocacy_update_7008() {
  $schema = module_invoke('springboard_advocacy', 'schema');
  if (db_table_exists('sba_message_action_confirm') == FALSE) {
    db_create_table('sba_message_action_confirm', $schema['sba_message_action_confirm']);
  }
}

/**
 * Add message action confirmation table fail message field.
 */
function springboard_advocacy_update_7009() {
  $schema = module_invoke('springboard_advocacy', 'schema');
  if (db_field_exists('sba_message_action_confirm', 'fail_message') == FALSE) {
    db_add_field('sba_message_action_confirm', 'fail_message', $schema['sba_message_action_confirm']['fields']['fail_message']);
  }
}

/**
 *  Add action optin id table if it does not exist.
 */
function springboard_advocacy_update_7010() {
  $schema = module_invoke('springboard_advocacy', 'schema');
  if(db_table_exists('springboard_action_opt_in') == FALSE) {
    db_create_table('springboard_action_opt_in', $schema['springboard_action_opt_in']);
  }
}

/**
 *  Add action optin block table if it does not exist.
 */
function springboard_advocacy_update_7011() {
  $schema = module_invoke('springboard_advocacy', 'schema');
  if(db_table_exists('springboard_action_opt_in_block') == FALSE) {
    db_create_table('springboard_action_opt_in_block', $schema['springboard_action_opt_in_block']);
  }
}

/**
 * Enable springboard target saerch module if springboard target is enabled.
 */
function springboard_advocacy_update_7012() {
  if (module_exists('springboard_target')) {
    module_enable(array('sba_target_search'));
  }
}

/**
 * Ensure new dependency springboard_webform.module is enabled.
 */
function springboard_advocacy_update_7013() {
  module_enable(array('springboard_webform'));
}

/**
 * Add Signer info to opt in table.
 */
function springboard_advocacy_update_7014() {
  $fields = array(
    'first_name',
    'last_name',
    'mail',
    'zip',
    'city',
    'state',
    'state_full',
  );
  $schema = module_invoke('springboard_advocacy', 'schema');
  if(db_table_exists('springboard_action_opt_in') !== FALSE) {
    foreach ($fields as $field) {
      if (db_field_exists('springboard_action_opt_in', $field) == FALSE) {
        db_add_field('springboard_action_opt_in', $field, $schema['springboard_action_opt_in']['fields'][$field]);
      }
    }
  }
}

/**
 * Populate springboard_action_opt_in with user data.
 */
function springboard_advocacy_update_7015(&$sandbox) {
  $batch = 50;
  $update_fields = array(
    'first_name' => 'sbp_first_name',
    'last_name' => 'sbp_last_name',
    'mail' => 'mail',
    'zip' => 'sbp_zip',
    'city' => 'sbp_city',
    'state' => 'sbp_state',
  );
  $form_nids = db_query("SELECT distinct(nid) FROM {springboard_action_opt_in} WHERE opt_in = 1 ORDER BY nid ASC")->fetchCol();
  $query = "SELECT sid, uid FROM {springboard_action_opt_in} WHERE opt_in = 1 AND nid = :nid ORDER BY created DESC LIMIT 100";
  if (!isset($sandbox['max'])) {
    $sandbox['progress'] = 0;
    $sandbox['max'] = count($form_nids);
    // store current form nid
    $sandbox['current_nid'] = array_pop($form_nids);
    $sandbox['current_sid'] = 0;
    // store all form nids to operate on
    $sandbox['form_nids'] = $form_nids;
  }
  
  // Get the most recent 100 opt-ins for the current form.
  $result = db_query($query, array(':nid' => $sandbox['current_nid']));
  
  while ($record = $result->fetchAssoc()) {
    // If the user no longer exists, we won't have data, but we will get php notices from entity.inc.
    $exists = db_query("select 1 from {users} where uid = :uid", array(':uid' => $record['uid']))->fetchField();
    if ($exists) {
      $update_record = array();

      // If the uid is 0 load it from the submission.
      if (empty($record['uid'])) {
        module_load_include('inc', 'webform', 'includes/webform.submissions');
        $submission = webform_get_submission($record['nid'], $record['sid']);
        if ($submission->uid) {
          $update_record['uid'] = $record['uid'] = $submission->uid;
        }
      }

      // Load the account and wrap it.
      $account = user_load($record['uid']);
      $account_wrapper = entity_metadata_wrapper('user', $account);

      foreach ($update_fields as $to => $from) {
        $update_record[$to] = isset($account_wrapper->$from) ? $account_wrapper->$from->value() : '';
      }
      if (isset($update_record['state'])) {
        $update_record['state_full'] = _springboard_advocacy_opt_in_full_state($update_record['state']);
      }
      // Trim out empty values before performing the update.
      $update_record = array_filter($update_record);
      if (!empty($update_record)) {
        $update_record['sid'] = $record['sid'];
        drupal_write_record('springboard_action_opt_in', $update_record, array('sid'));
      }
    }
    $sandbox['current_sid'] = $record['sid'];
  }
  // update progress and get next form nid
  $sandbox['progress']++;
  $sandbox['current_nid'] = array_pop($sandbox['form_nids']);
  
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);

  if ($sandbox['#finished'] >= 1) {
    return t('springboard_action_opt_in table populated with user data.');
  }
}
