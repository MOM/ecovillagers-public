<?php

/**
 * @file
 * Test suite for Market Source module.
 */

class PageWrappersRulesetTestCase extends PageWrappersTestCase {
  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'Page Wrappers Ruleset Test',
      'description' => 'Testing the Ctools Custom Access Ruleset Integration.',
      'group' => 'Page Wrappers',
    );
  }

  public function setUp($modules = array(), $permissions = array()) {
    $modules = $modules + array(
      'ctools',
      'ctools_access_ruleset',
    );
    $permissions = $permissions + array(
      'administer ctools access ruleset',
    );
    parent::setUp($modules, $permissions);
    // Create a role for testing with a ruleset
    $this->page_wrapper_test_rid = $this->drupalCreateRole(array('access content'), 'page wrapper test');
  }

  public function testPageWrappersRulesetTest() {
    //Create two page wrappers
    $edit['title'] = $this->randomName(8);
    $edit["page_wrappers_html_template[und][0][value]"] = $this->html_template('Ruleset 1');
    $this->drupalPost('node/add/page-wrapper', $edit, t('Save'));

    $edit['title'] = $this->randomName(8);
    $edit["page_wrappers_html_template[und][0][value]"] = $this->html_template('Ruleset 2');
    $this->drupalPost('node/add/page-wrapper', $edit, t('Save'));

    $this->createRuleset();

    // Create node and assign page wrappers
    $this->drupalGet('node/add/page');
    $edit = array();
    $edit['title'] = 'Page Wrappers test page';
    $edit["body[und][0][value]"] = $this->randomName(16);
    $edit["page_wrappers[new:0][wrapper_nid]"] = 1;
    $edit["page_wrappers[new:0][ruleset]"] = 'ruleset_test';
    $edit["page_wrappers[new:0][weight]"] = -1;
    $this->drupalPost(NULL, $edit, 'Add Another');
    $edit = array();
    // Set the ruleset wrapper
    $edit["page_wrappers[new:0][wrapper_nid]"] = 1;
    $edit["page_wrappers[new:0][ruleset]"] = 'ruleset_test';
    $edit["page_wrappers[new:0][weight]"] = -1;
    // Set the default wrapper
    $edit["page_wrappers[new:1][wrapper_nid]"] = 2;
    $edit["page_wrappers[new:1][ruleset]"] = 1;
    $edit["page_wrappers[new:1][weight]"] = 1;
    $this->drupalPost(NULL, $edit, t('Save'));

    // Visit the page and confirm we see the default wrapper
    $this->drupalGet('node/3');
    $this->assertText('Ruleset 2', t('The default ruleset configuration selected the appropriate Page Wrapper'), 'Page Wrappers Node');

    // Add the test role to our user and visit the page again
    $new_role[$this->page_wrapper_test_rid] = 'page wrapper test';
    $all_roles = $this->privileged_user->roles + $new_role;
    user_save($this->privileged_user, array('roles' => $all_roles));
    $this->drupalGet('node/3');
    $this->assertText('Ruleset 1', t('The user role ruleset configuration selected the appropriate Page Wrapper'), 'Page Wrappers Node');

    // Confirm anonymous user sees the default wrapper
    $this->drupalLogout();
    $this->drupalGet('node/3');
    $this->assertText('Ruleset 2', t('The default ruleset configuration selected the appropriate Page Wrapper for an anonymous user'), 'Page Wrappers Node');
  }

  protected function createRuleset() {
    $import = '
      $ruleset = new stdClass();
      $ruleset->disabled = FALSE; /* Edit this to true to make a default ruleset disabled initially */
      $ruleset->api_version = 1;
      $ruleset->name = "ruleset_test";
      $ruleset->admin_title = "Ruleset Test";
      $ruleset->admin_description = "";
      $ruleset->requiredcontexts = array();
      $ruleset->contexts = array();
      $ruleset->relationships = array();
      $ruleset->access = array(
        "plugins" => array(
          0 => array(
            "name" => "role",
            "settings" => array(
              "rids" => array(
                0 => ' . $this->page_wrapper_test_rid . ',
              ),
            ),
            "context" => "logged-in-user",
            "not" => FALSE,
          ),
        ),
        "logic" => "and",
      );
      ';
    ctools_include('export');
    $object = ctools_export_crud_import('ctools_access_ruleset', $import);
    ctools_export_crud_save('ctools_access_ruleset', $object);
  }
}
