<?php
/**
 * @file
 * Miscellaneous hooks and alterations for ecovillagers.org.
 */

/**
 * Implementation of hook_menu().
 */
function ecovillagers_tweaks_menu() {
  $items['springboard_cookie/js/regurgitate'] = array(
    'title' => '',
    'page callback' => 'ecovillagers_tweaks_regurgitate_springboard_cookie',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_init().
 */
function ecovillagers_tweaks_init() {
  // Redirect a P2P personal campaign page to add its campaign market source to the query string.
  if (arg(0) == 'node' && !arg(2) && user_is_anonymous()) {  // Only for anonymous user.
    $node = menu_get_object();
    if (is_object($node) && !empty($node->nid) && $node->type == 'p2p_personal_campaign') {
      $params = drupal_get_query_parameters();
      if (empty($params['ref_uid'])) {
        $params['ref_uid'] = $node->uid;
        drupal_goto("node/{$node->nid}", array('query' => $params));
      }
    }
  }
}

/**
 * Implements hook_salesforce_queue_create_item_alter()
 */
function ecovillagers_tweaks_salesforce_queue_create_item_alter(&$item) {
  if ($item['object_type'] == 'Contact') {
    if (!empty($item['sobject']->fields['Referring_Contact__c']) && is_numeric($item['sobject']->fields['Referring_Contact__c'])) {
      // Assume a numeric Referring Contact value is a UID that needs to be swapped for SFID.
      $item['sobject']->fields['Referring_Contact__c'] = '[Contact:user:' . $item['sobject']->fields['Referring_Contact__c'] . ']';
    }
  }
}

/**
 * Implements MODULE_process_HOOK().
 *
 * Get rid of the hardcoded inclusion of cents in donation total amount goals.
 */
function ecovillagers_tweaks_process_webform_goals_widget(&$args) {
  if ($args['webform_goal']['metric'] == 'fundraiser_donation_amount') {
    $args['goal_progress']['count'] = preg_replace("|\\.[0-9]{2}\$|", '', $args['goal_progress']['count']);
    $args['goal_progress']['target'] = preg_replace("|\\.[0-9]{2}\$|", '', $args['goal_progress']['target']);
  }
}

/**
 * Implementation of hook_form_alter().
 */
function ecovillagers_tweaks_form_alter(&$form, &$form_state, $form_id) {
  // Add submission handler to Webform User-enabled webform.
  if (module_exists('webform_user')) {
    if (strpos($form_id, 'webform_client') !== FALSE && arg(2) != 'submission' && arg(4) != 'edit') {
      $node = node_load($form['#node']->nid);
      if (_webform_user_is_webform_user_node($node)) {
        $form['#submit'][] = 'ecovillagers_tweaks_webform_user_webform_submit';
        // Include the autofill .js
        drupal_add_js(drupal_get_path('module', 'ecovillagers_tweaks') . '/js/webform-autofill.js');
      }
    }
  }
}

/**
 * Webform User-enabled webform submission.
 */
function ecovillagers_tweaks_webform_user_webform_submit($form, &$form_state) {
  // Leave a flag for the benefit of ecovillagers_tweaks_regurgitate_springboard_cookie().
  setcookie('webform_user_submission', 1, time() + 60 * 60 * 24, '/');
}

/**
 * Menu callback for springboard_cookie/js/regurgitate
 *
 * Returns current contents of the Springboard cookie if they're less than 24 hours old.
 */
function ecovillagers_tweaks_regurgitate_springboard_cookie() {
  // Was a webform_user form submitted in the last 24 hours?
  if (!empty($_COOKIE['webform_user_submission'])) {
    $cookie = springboard_cookie_get_cookie();
  } else {
    $cookie = (object)[];
  }
  // Send it back as JSON.
  drupal_json_output($cookie);
  exit;
}